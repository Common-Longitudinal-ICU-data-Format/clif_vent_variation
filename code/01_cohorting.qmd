---
title: "01_cohort_identification"
author: Nick Ingraham
date: today
execute: 
  echo: false
format: 
  html:
    embed-resources: true
    number-sections: true
    toc: true
    html-q-tags: true
    code-fold: true
editor: source
editor_options: 
  chunk_output_type: console
---


## Cohort identification

```{r}
#~~~~~~~~~~
# ID cohort
#~~~~~~~~~~

# Main Respiratory Support Table
#~~ using readr or fst or arrow (parquet) package depending on the file type. (THESE WERE SET DURING SET UP ^^ )
clif_respiratory_support_start <- 
  read_data("clif_respiratory_support") |> 
  dplyr::select(hospitalization_id, device_category, tracheostomy, recorded_dttm) |> 
# Just getting those ventilated or trach
  filter(str_to_lower(device_category) == "imv" | tracheostomy == 1) |> 
  mutate(across(where(is.character), str_to_lower)) 

    
clif_hospitalization_start <- 
  read_data("clif_hospitalization") |> 
  dplyr::select(hospitalization_id, admission_dttm, discharge_dttm, age_at_admission, patient_id, 
         # admission_type_name, 
         # admission_type_category, 
         discharge_name, discharge_category) |> 
  mutate(admission_dttm = as.POSIXct(admission_dttm, tz = "UTC")) |> 
  mutate(admission_dttm = ymd_hms(admission_dttm)) |> 
  mutate(discharge_dttm = as.POSIXct(discharge_dttm, tz = "UTC")) |>       
  mutate(discharge_dttm = ymd_hms(discharge_dttm)) |>       
  # unfactor things to ensure everything is lowercase
  mutate(across(where(is.factor), as.character)) |> 
  # get everything to lower
  mutate(across(where(is_character), str_to_lower)) 


# getting a keep_list of hospitalization_ids that have vent or trach during their encounter... we will use this right_join the dfs below
# Update 10/2024... 
#     need to just use patient_id for now 
#     because we need to get hsopitalizations_joined_id first 
#     before we pair down to the hospitalizations we want to keep 
df_cohort_keep_start <- clif_respiratory_support_start |> 
  

# Exclusion based on date
  left_join(clif_hospitalization_start) |>
  filter(
    lubridate::date(admission_dttm) >= start_date,
    lubridate::date(admission_dttm) <= end_date,
# age exclusion
    age_at_admission >= 18,
# missing data exclusion
    !is.na(age_at_admission)
    ) |>  
  dplyr::select(patient_id) |> 
  distinct()


# shrinking down to just the patients that meet criteria
clif_hospitalization_start <- clif_hospitalization_start |> 
  right_join(df_cohort_keep_start) 


```



## Fixing Hospitalization

```{r}
#Create an Hospital Block ID - This is to Identify Continuous Hospitalizations When Patients Are Transferred Between Hospitals in One Health System
#This code is intended be robust to various ways encounters may be coded in CLIF databases
hospital_blocks <- clif_hospitalization_start |> 
  dplyr::select(patient_id, hospitalization_id, admission_dttm, discharge_dttm) |>
  arrange(patient_id, admission_dttm) |>
  collect()

#Identify Admissions That Occur Within 3 Hours of a Discharge (Will Consider Those Linked and as Part of One Continuous Encounter)
#Use Data Table for Speed
linked_encounters <- setDT(hospital_blocks)
#Create a Variable for the time of the next admission and time of previous discharge
linked_encounters[, ':=' (next_admit_dttm = data.table::shift(admission_dttm, n=1, type = "lead")), by = patient_id]
linked_encounters[, ':=' (prev_dc_dttm = data.table::shift(discharge_dttm, n=1, type = "lag")), by = patient_id]
#Calculates Time Between Discharge and Next Admit
linked_encounters[, next_diff_time := difftime(next_admit_dttm, discharge_dttm, units = "hours")]
linked_encounters[, prev_diff_time := difftime(admission_dttm, prev_dc_dttm, units = "hours")]

#Now Create Variable Indicating a Linked Encounter (next_admit-dc time <6 hours or prev_dc-admint <6 hours)
linked_encounters[, linked := fcase(
  (next_diff_time <6 | prev_diff_time <6), 1)]
#Filter to Only Linked Encounters and number them
linked_encounters <- linked_encounters[linked==1]
#This Identifies the First Encounter in a Series of Linked Encounters
linked_encounters[, first_link := fcase(
  (rowid(linked)==1 | (next_diff_time<6 & prev_diff_time>6)), 1
), by = patient_id]

#Now Numbers Encounters, easier in dplyr
#Filter to Just First Links, Number them and then Remerge with linked encounters
temp <- as_tibble(linked_encounters) |>
  filter(first_link==1) |>
  group_by(patient_id) |>
  mutate(link_group=row_number()) |>
  ungroup() |>
  dplyr::select(hospitalization_id, link_group) 
linked_encounters <- as_tibble(left_join(linked_encounters, temp)) |>
  fill(link_group, .direction = c("down")) |>
  #Create a Variable Indicating Which Number of LIinked Encounter the Encounter is
  group_by(patient_id, link_group) |>
  mutate(link_number=row_number()) |>
  ungroup() |>
  dplyr::select(hospitalization_id, linked, link_number)
rm(temp)

#Now Join Back to Hospitalization Table
clif_hospitalization_start <- clif_hospitalization_start |>
  left_join(linked_encounters) |>
  mutate(linked=if_else(is.na(linked), 0, linked)) |>
  compute()

#Pull Out the Any Linked Encounter that Is NOt the First Encounter and Assign Each Encounter an Encounter Block ID in the Original clif_hospitalization table
df_link <- clif_hospitalization_start |>
  filter(link_number>1) |>
  collect()

clif_hospitalization <- clif_hospitalization_start |>
  group_by(patient_id) |>
  arrange(patient_id, admission_dttm) |>
  #Remove Link Numbers that Are Not First in Link Encounter
  filter(link_number==1 | is.na(link_number)) |>
  #Make Encounter Blocks
  collect() |>
  mutate(encounter_block=row_number()) |>
  rowbind(df_link, fill = TRUE) |> #Bring Back in Link Numbers >1
  group_by(patient_id) |> arrange(patient_id, admission_dttm) |>
  fill(encounter_block, .direction = "down") |>
  ungroup()|>
  #Finally, for Linked Encounters Identify 'Final_admit_date' and 'final_dc_date' which are the first and last dates of a link block
  group_by(patient_id, encounter_block) |>
  mutate(final_admission_dttm=fcase(
    row_number()==1, admission_dttm
  )) |>
  mutate(final_discharge_dttm=fcase(
    row_number()==n(), discharge_dttm
  )) |>
  # mutate(final_admission_type_name=fcase(
  #   row_number()==1, admission_type_name
  # )) |>
  mutate(final_discharge_name=fcase(
    row_number()==n(), discharge_name
  )) |>
  # mutate(final_admission_type_category=fcase(
  #   row_number()==1, admission_type_category
  # )) |>
  mutate(final_discharge_category=fcase(
    row_number()==n(), discharge_category
  )) |>
  mutate(clif_hospitalizations_joined_id = cur_group_id()) |> 
  fill(starts_with("final_"), .direction = 'updown') |>
  
  dplyr::select(
    clif_hospitalizations_joined_id,
    hospitalization_id,
    patient_id,
    encounter_block,
    age_at_admission,
    admission_dttm = final_admission_dttm,
    discharge_dttm = final_discharge_dttm,
    # admission_type_name = final_admission_type_name,
    discharge_name = final_discharge_name,
    # admission_type_category = final_admission_type_category,
    discharge_category = final_discharge_category
  ) |> 
  ungroup() |> 
  as_arrow_table() |> 
  collect()



```

### Final cohorting with fixed clif_hospitalizations_joined_id
```{r}

clif_patient_start <-  read_data("clif_patient") |> 
  dplyr::select(patient_id, sex_category) |> 
  filter(str_detect(str_to_lower(sex_category), "male|female")) |> 
  dplyr::select(patient_id) |> 
  distinct()


# need to get the joined encounters taht we need to keep... then we will make a final keep with 
#     clif_hospitalizations_joined_id, hospitalization_id, patient_id
df_cohort_keep_encounters <- 
  # These are just patient_ids 
  df_cohort_keep_start |> 

# redo inclusion/exclusion with new admit dates and d/c dates
# Getting hospitaliaztion_ids and such with new variables made above
# Exclusion based on date
  left_join(clif_hospitalization) |>
  inner_join(clif_patient_start) |> 
  filter(
    lubridate::date(admission_dttm) >= start_date,
    lubridate::date(admission_dttm) <= end_date,
# age exclusion
    age_at_admission >= 18,
# missing data exclusion
    !is.na(age_at_admission)
    ) |>  
# these are JUST hospitalizations with imv or trach... we are using this to ID the joined_ids that we need to keep
  inner_join(clif_respiratory_support_start |> dplyr::select(hospitalization_id) |> distinct()) |> 
  dplyr::select(clif_hospitalizations_joined_id) |> 
  distinct()

df_cohort_keep <- clif_hospitalization |> 
  inner_join(df_cohort_keep_encounters) |> 
  mutate(patient_id = as.character(patient_id)) |> 
  mutate(hospitalization_id = as.character(hospitalization_id)) |> 
  dplyr::select(clif_hospitalizations_joined_id, hospitalization_id, patient_id) |> 
  distinct()
  
# dropping hospitals with < 100 encounters
hospital_keep <- read_data("clif_adt") %>%
  mutate(across(where(is.character), str_to_lower)) |> 

  right_join(df_cohort_keep) |> 
  mutate(location_category = factor(location_category,
                                    levels = (c("icu", "stepdown", "ward", "ed", "procedural", "other")), ordered = TRUE)) |> 
  filter(location_category == "icu") |> 
  group_by(clif_hospitalizations_joined_id) |> 
  arrange(clif_hospitalizations_joined_id, location_category, in_dttm) |> 
  
  # first one will be ICU
  slice_head(n=1) |> 
  ungroup() |> 
  dplyr::select(clif_hospitalizations_joined_id, hospital_id) |> 
  mutate(hospital_id_count = n(),
         .by = "hospital_id") |> 
  filter(hospital_id_count > 100)

# Count the number of encounters per hospital_id and assign "Hospital 1", "Hospital 2", etc.
hospital_order <- hospital_keep |> 
  count(hospital_id, name = "encounters") %>%
  arrange(desc(encounters)) %>%
  mutate(hospital_label = paste0("Hospital ", site_name," ", row_number()))

# use this in analytic sets after we ID the ICU/VENT hosp to filter out hospitals that don't have enough traffic
# filter(hospital_id %in% hospital_filter)
hospital_filter <- hospital_order |> pull()

df_cohort_keep_encounters <- df_cohort_keep_encounters |> 
  # drop those at hospitals with < 100
  inner_join(hospital_keep |> select(clif_hospitalizations_joined_id))
  
df_cohort_keep <- df_cohort_keep |> 
  inner_join(df_cohort_keep_encounters)

# narrowing down clif_hospitaliation to the appropriate cohort
clif_hospitalization <- clif_hospitalization |> 
  inner_join(df_cohort_keep_encounters)
  
  
  
```


### Importing function

```{r}
#~~~~~~~~~~
# Importing function
#~~~~~~~~~~

# Function for importing files easily just with the file of the clif_table
import_df <- function(x) {
  # Construct the file path
  file_path <- paste0(tables_path,"/", x, ".", file_type)
  
  # Dynamically call the appropriate read function based on file_type
  
  if (file_type == "parquet") {
    
    read_function <- get(paste0("open_dataset")) 
    
    df <- read_function(file_path) |>
      
      mutate(across(ends_with("_id"), as.character)) |> 
      
      # helps with glitch in open_dataset
      mutate(across(where(is.character), as.character)) |>
      
      # # helps with glitch in open_dataset
      # mutate(across(where(is.double), as.integer)) |> 
      
      # right join early so files are smaller
      right_join(df_cohort_keep) |> 
      
      # unfactor things to ensure everything is lowercase
      mutate(across(where(is.factor), as.character)) |> 
      
      # get everything to lower
      mutate(across(where(is_character), str_to_lower)) |> 
      
      # only need if using open dataset
      collect()
    
  } else {
    
    read_function <- get(paste0("read_", file_type)) 
    
    df <- read_function(file_path) |>
      mutate(across(ends_with("_id"), as.character)) |> 
      
      # right join early so files are smaller
      right_join(df_cohort_keep) |> 
      
      # unfactor things to ensure everything is lowercase
      mutate(across(where(is.factor), as.character)) |> 
      
      # get everything to lower
      mutate(across(where(is_character), str_to_lower)) 
    
  }
  
  
  # Find all datetime variables containing 'dttm'
  datetime_vars <- names(df)[grepl("dttm", names(df))]
  
  # Check and convert datetime variables
  for (var in datetime_vars) {
    if (!inherits(df[[var]], "POSIXct")) {
      
      df[[var]] <- as.POSIXct(df[[var]], tz = "UTC")
      
      # Attempt to parse datetime using a common format, adjust based on your actual format
      df[[var]] <- ymd_hms(df[[var]], quiet = TRUE)
      
      # Check if it just turned things into NA
      if (is.na(ffirst(df[[var]], na.rm = TRUE))) {
        stop(paste("Conversion failed for:", var,"\n","\nPlease look at your clif data for   ", var, "\nmake sure its POSIXct format!!"))
        
        
        # Check if conversion failed (if it's still not POSIXct)
        if (!inherits(df[[var]], "POSIXct")) {
          stop(paste("Conversion failed for:", var,"\n","\nPlease look at your clif data for   ", var, "\nmake sure its POSIXct format!!"))
          
        }
        
      }
    }
    print(paste("Woohoo",var,"is in the correct dttm format!!"))
  }
  
  # Join with cohort data and glimpse the result
  df %>% glimpse()
  
  # Assign the dataframe to a new variable in the global environment named after the file_name
  assign(x, df, envir = .GlobalEnv)
}




# List all objects in the global environment
all_objects <- ls()

# Identify objects ending with "_start"
df_start_objects <- grep("_start$", all_objects, value = TRUE)

# # Remove identified objects
# rm(list = df_start_objects)
# gc()

```



### Importing tables

```{r}

#~~~~~~~~~~
# Import data and cohort tables
#~~~~~~~~~~


# Resp support table cohort
clif_respiratory_support <- import_df("clif_respiratory_support") |> 
      # Check if Variables match!!
      # You will get an error if you do not have all the relevant variables needed
      dplyr::select(
        clif_hospitalizations_joined_id, hospitalization_id,
        recorded_dttm,
        device_name,
        device_category,
        mode_name,
        mode_category,
        fio2_set,
        lpm_set,
        tidal_volume_set,
        resp_rate_set,
        pressure_control_set, # not used
        pressure_support_set,
        # flow_rate_set,  # not used
        # peak_inspiratory_pressure_set, # not used and only in infants
        inspiratory_time_set, # not used
        peep_set,
        tidal_volume_obs,
        plateau_pressure_obs,
        peak_inspiratory_pressure_obs,
        starts_with("mean_airway_pressure"),  # in case ppl don't have this yet.. prevents from breaking
        # peep_obs, # not used and not in adult set 
        minute_vent_obs,
        tracheostomy) |> 
  mutate(across(ends_with("_set"), as.double)) |> 
  mutate(across(ends_with("_obs"), as.double))


# ADT File to merge with patient so we can get hospital ID
clif_adt <- import_df("clif_adt") |> 
      # Check if Variables match!!
      dplyr::select(
        clif_hospitalizations_joined_id, hospitalization_id,
        location_name,
        location_category,
        in_dttm,
        out_dttm,
        hospital_id)|> 
  filter(!is.na(location_category))


# Count the number of encounters per hospital_id and assign "Hospital 1", "Hospital 2", etc.
hospital_order <- clif_adt %>%
  count(hospital_id, name = "encounters") %>%
  arrange(desc(encounters)) %>%
  mutate(hospital_label = paste0("Hospital ", site_name," ", row_number()))

clif_adt <- clif_adt |> 
  left_join(hospital_order %>% dplyr::select(hospital_id, hospital_label), by = "hospital_id") |> 
  dplyr::select(-hospital_id) |> 
  rename(hospital_id = hospital_label) 
  
  

# Vitals to merge with patient so we can get BMI, height, spo2 information
clif_vitals <- import_df("clif_vitals") |> 
      # Check if Variables match!!
      dplyr::select(
        clif_hospitalizations_joined_id, hospitalization_id,
        recorded_dttm,
        vital_name,
        vital_category,
        vital_value
        # meas_site_name
        ) |> 
  filter(!is.na(vital_category))


# GCS for lap2
clif_gcs <- import_df("clif_patient_assessments") |> 
  filter(assessment_category == "gcs_total") |> 
      # Check if Variables match!!
      dplyr::select(
        clif_hospitalizations_joined_id, hospitalization_id,
        recorded_dttm,
        gcs_total = numerical_value
        )

# Labs to merge with patient so we can get pao2 all lap2 needs
clif_labs <- import_df("clif_labs") |> 
      # Check if Variables match!!
      dplyr::select(
        clif_hospitalizations_joined_id, hospitalization_id,
        lab_order_dttm,
        lab_result_dttm,
        lab_collect_dttm,
        lab_name,
        lab_category,
        # lab_order_category,
        lab_value_numeric,
        reference_unit) |> 
  arrange(clif_hospitalizations_joined_id, hospitalization_id, lab_collect_dttm, lab_category, lab_value_numeric) |> 
  
  # get rid of duplicates
  #     will take the first non-missing lab_value_numeric
  distinct(clif_hospitalizations_joined_id, hospitalization_id, lab_collect_dttm, lab_category, .keep_all = TRUE) |> 
    # get rid of those with NO tidal volumes ever
  group_by(clif_hospitalizations_joined_id) |> 
  filter(!is.na(lab_category)) |> 
  ungroup() 
  

# Demographics 
clif_patient <- import_df("clif_patient") |> 
      # Check if Variables match!!
      dplyr::select(
        clif_hospitalizations_joined_id, hospitalization_id,
        patient_id,
        sex_category,
        race_category,
        ethnicity_category,
        death_dttm) |> 
  arrange(patient_id, sex_category) |> 
  # account for possible "male" and "unknown" documentation. very race.  taking male > unknown 
  # distinct will slice the top one.
  distinct(clif_hospitalizations_joined_id, hospitalization_id, patient_id, .keep_all = TRUE) |> 
  filter(sex_category != "unknown")


# THIS IS DONE ALREADY ABOVE!!
# # Encounter Information 
# clif_hospitalization <- import_df("clif_hospitalization") |>
#       # Check if Variables match!!
#       dplyr::select(clif_hospitalizations_joined_id, hospitalization_id,
#              patient_id,
#              # admission_type_category, # don't have this yet in CLIF
#              admission_dttm,
#              discharge_dttm,
#              discharge_category,
#              discharge_name,
#              age_at_admission)



# combining them to one df
clif_demographics_combined <- clif_patient |> 
  left_join(clif_hospitalization) |> dplyr::select(-hospitalization_id) |> distinct()



# # Procedures (don't need for now, just for checking trach data at some point)
# clif_procedures <- import_df("clif_procedures") |>
#       # Check if Variables match!!
#       c(clif_hospitalizations_joined_id, hospitalization_id,
#         procedure_name,
#         start_time,
#         hcup_category)     # UMN variable... may want to implement in CLIF... just need to link HCUP table to PX codes



```

# Import QA checks

```{r}

# Check fio2_set
fio2_mean <- mean(clif_respiratory_support$fio2_set, na.rm = TRUE) 

# fixing if its less than one
# You will get a warning but it will be fixed on its own with IF statement
if(fio2_mean < 1){ 
  fio2warning()
  clif_respiratory_support <- clif_respiratory_support |> mutate(fio2_set = fio2_set * 100)
}


# Check Values of labs and vitals
if(is.character(clif_labs$lab_value_numeric)){
  labwarning()
  clif_labs <- clif_labs |> 
    mutate(lab_value_numeric = as.numeric(parse_number(lab_value_numeric)))
}


# Check Values of labs and vitals
if(is.character(clif_vitals$vital_value)){
  vitalwarning()
  clif_vitals <- clif_vitals |> 
    mutate(vital_value = as.numeric(parse_number(vital_value)))
}

```



# Cleaning Data

## Hourly Sequence

```{r}
#| label: cleaning up vent data


#~~~~~~~~~~~~~~~~
##~~ getting an hour sequence so we can fill in the gaps
#~~~~~~~~~~~~~~~~
## This is just encounter ID and recorded times at xx:59:59
## data that occurs last in the hour when there are multiple data points 
## in the end ... we will want this to be the data we use to fill the next hour... if time is NOT unified... you could have hour sequence that is 12:01, 1:01 everywhere and even when there IS data you risk filling in from the hour before and not getting the NEW data during that hour.
# if we set all the new seq hours to 59:59 then you can fill those in without risking other data when you fill in and do distinct (take the first of the hour for everything).  Remember.  Even hours with 1 data will have a new hour seq row that may be before or after the data... so doing the 59:59 puts it at the end!!!
# 




hour_sequence <- clif_respiratory_support |> 
  group_by(clif_hospitalizations_joined_id)  |> 

  reframe(recorded_dttm = seq(fmin(recorded_dttm), fmax(recorded_dttm), by = "1 hour")) |>
  # Adjust to the last second of the hour using lubridate's floor_date
  mutate(recorded_dttm = floor_date(recorded_dttm, "hour") + minutes(59) + seconds(59)) |> 
  # Create date and hour columns efficiently
  mutate(recorded_date = as_date(recorded_dttm),
         recorded_hour = hour(recorded_dttm)) |> 
  ungroup()

```

## Quality Check & Clean + Waterfall

```{r}
#~~~~~~~~~~~~~~~~
##~~ Quick QA and fixing missing values throughout
#~~~~~~~~~~~~~~~~
ni_tic()
df_resp_support_1  <- clif_respiratory_support |> 
  dplyr::select(clif_hospitalizations_joined_id, hospitalization_id, recorded_dttm, device_category, device_name, mode_category, mode_name, 
         fio2_set, lpm_set, tidal_volume_set, peep_set,  pressure_support_set, resp_rate_set, tracheostomy, 
         tidal_volume_obs, peak_inspiratory_pressure_obs, minute_vent_obs, plateau_pressure_obs, starts_with("mean_airway_pressure_obs") 
  )

if ("mean_airway_pressure_obs" %in% names(df_resp_support_1)){
  df_resp_support_1 <- df_resp_support_1 |> 
    mutate(
          
    # mean_airway_pressure_obs
    mean_airway_pressure_obs = fcase(mean_airway_pressure_obs > 60, NA_real_, rep_len(TRUE, length(mean_airway_pressure_obs)), mean_airway_pressure_obs),
    mean_airway_pressure_obs = fcase(mean_airway_pressure_obs <  0, NA_real_, rep_len(TRUE, length(mean_airway_pressure_obs)), mean_airway_pressure_obs)
    
    )
  print("QC for MAIRP done!!")
}
  
  
df_resp_support_1 <- df_resp_support_1 |> 
  mutate(
    # fio2_set
    fio2_set = fcase(fio2_set > 100, NA_real_, rep_len(TRUE, length(fio2_set)), fio2_set),
    fio2_set = fcase(fio2_set <  21, NA_real_, rep_len(TRUE, length(fio2_set)), fio2_set),
    
    # Set tidal_volume_set
    tidal_volume_set = fcase(tidal_volume_set > 2500, NA_real_, rep_len(TRUE, length(tidal_volume_set)), tidal_volume_set),
    tidal_volume_set = fcase(tidal_volume_set <   50, NA_real_, rep_len(TRUE, length(tidal_volume_set)), tidal_volume_set),
    
    # peep_set
    peep_set = fcase(peep_set > 30, NA_real_, rep_len(TRUE, length(peep_set)), peep_set),
    peep_set = fcase(peep_set <  0, NA_real_, rep_len(TRUE, length(peep_set)), peep_set),
    
    # pressure_support_set (sometimes APRV may be in here ... so limit ~ 50??)
    pressure_support_set = fcase(pressure_support_set > 50, NA_real_, rep_len(TRUE, length(pressure_support_set)), pressure_support_set),
    pressure_support_set = fcase(pressure_support_set <  0, NA_real_, rep_len(TRUE, length(pressure_support_set)), pressure_support_set),
    
    # resp_rate_set
    resp_rate_set = fcase(resp_rate_set > 60, NA_real_, rep_len(TRUE, length(resp_rate_set)), resp_rate_set),
    resp_rate_set = fcase(resp_rate_set <  0, NA_real_, rep_len(TRUE, length(resp_rate_set)), resp_rate_set),
    
    # tidal_volume_obs
    tidal_volume_obs = fcase(tidal_volume_obs > 2500, NA_real_, rep_len(TRUE, length(tidal_volume_obs)), tidal_volume_obs),
    tidal_volume_obs = fcase(tidal_volume_obs <    0, NA_real_, rep_len(TRUE, length(tidal_volume_obs)), tidal_volume_obs),
    
    # peak_inspiratory_pressure_obs
    peak_inspiratory_pressure_obs = fcase(peak_inspiratory_pressure_obs > 60, NA_real_, rep_len(TRUE, length(peak_inspiratory_pressure_obs)), peak_inspiratory_pressure_obs),
    peak_inspiratory_pressure_obs = fcase(peak_inspiratory_pressure_obs <  0, NA_real_, rep_len(TRUE, length(peak_inspiratory_pressure_obs)), peak_inspiratory_pressure_obs),
    
    # minute_vent_obs
    minute_vent_obs = fcase(minute_vent_obs > 30, NA_real_, rep_len(TRUE, length(minute_vent_obs)), minute_vent_obs),
    minute_vent_obs = fcase(minute_vent_obs <  0, NA_real_, rep_len(TRUE, length(minute_vent_obs)), minute_vent_obs),

    
    ) |>
  
  # getting data and hour information
  mutate(recorded_date = date(recorded_dttm),
         recorded_hour = hour(recorded_dttm)) |> 
  
  # getting hospital ID for each hour
  dplyr::left_join( #tidy_table doesn't like it when you use join_by() with between (Dropped tidy_table 2_2024) 
    clif_adt |> 
      dplyr::select(clif_hospitalizations_joined_id, hospital_id, location_name, location_category, in_dttm, out_dttm),
    by = join_by(clif_hospitalizations_joined_id, between(recorded_dttm, in_dttm, out_dttm))
  ) |> 

  # order for filling things in
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 
  

  
  # Fixing when: the mode and category are there with device_name and device_cat not filled in.  fixing with the below
  mutate(
    device_category = 
      fcase(
        is.na(device_category) & is.na(device_name) &
          str_detect(mode_category, "assist control-volume control|simv|pressure control"),
        "imv",
            rep_len(TRUE, length(device_category)), device_category
      ),
    device_name = 
      fcase(
        str_detect(device_category, "imv") & is.na(device_name) &
          str_detect(mode_category, "assist control-volume control|simv|pressure control"),
        "mechanical ventilator",
        rep_len(TRUE, length(device_name)), device_name
        
      ),
  ) |>
  
  # fixing other vent things
  #     If device before is VENT + normal vent things ... its VENT too 
  mutate(device_category = fcase(is.na(device_category) & 
                                     lag(device_category == "imv") & 
                                     tidal_volume_set > 1 & 
                                     resp_rate_set > 1 & 
                                     peep_set > 1, 
                                   "imv", 
                                   rep_len(TRUE, length(device_category)), device_category)) |>
  
  #     If device after is VENT + normal vent things ... its VENT too 
  mutate(device_category = fcase(is.na(device_category) & 
                                     lead(device_category == "imv") & 
                                     tidal_volume_set > 1 & 
                                     resp_rate_set > 1 & 
                                     peep_set > 1, 
                                   "imv", 
                                   rep_len(TRUE, length(device_category)), device_category)) |>
  
  # same as above for device_name ^^^^^^^^^^^
  mutate(device_name = fcase(is.na(device_name) & lag(device_category == "imv") & tidal_volume_set > 1 & resp_rate_set > 1 & peep_set > 1, 
                             "mechanical ventilation", 
                             rep_len(TRUE, length(device_name)), device_name)) |> 
  
  mutate(device_name = fcase(is.na(device_name) & lead(device_category == "imv") & tidal_volume_set > 1 & resp_rate_set > 1 & peep_set > 1, 
                             "mechanical ventilation", 
                             rep_len(TRUE, length(device_name)), device_name)) |> 
  
  
  # doing this for BiPAP as well 
  mutate(device_category = fcase(is.na(device_category) & 
                                     lag(device_category == "nippv") & 
                                     minute_vent_obs > 1 & 
                                     peak_inspiratory_pressure_obs > 1 & 
                                     pressure_support_set > 1, 
                                   "nippv", 
                                   rep_len(TRUE, length(device_category)), device_category)) |>
  
  mutate(device_category = fcase(is.na(device_category) & 
                                     lead(device_category == "nippv") & 
                                     minute_vent_obs > 1 & 
                                     peak_inspiratory_pressure_obs > 1 & 
                                     pressure_support_set > 1, 
                                   "nippv", 
                                   rep_len(TRUE, length(device_category)), device_category)) |>
  
  

  # there are times when its clearly back to CMV (resp set and volume is set but no one puts a mode back in... just leaves it blank)
  # this is usually after pressure support ... we need to classify this now as CMV. 
  # only exception to this should be when it says trach
  # There are also some without device_cat or name and they have all the variables... these should be changed too 
  mutate(
    device_category = 
      fcase(
        is.na(device_category) & 
          !str_detect(device_name, "trach") &
          tidal_volume_set > 0 & 
          resp_rate_set > 0,
        "imv",
        rep_len(TRUE, length(device_category)), device_category),
    device_name = 
      fcase(
        is.na(device_name) & 
          !str_detect(device_name, "trach") &
          tidal_volume_set > 0 & 
          resp_rate_set > 0,
        "mechanical ventilator",
        rep_len(TRUE, length(device_name)), device_name),
    mode_category = 
      fcase(
        is.na(mode_category) & 
          !str_detect(device_name, "trach") &
          tidal_volume_set > 0 & 
          resp_rate_set > 0,
        "assist control-volume control",
        rep_len(TRUE, length(mode_category)), mode_category),
    mode_name = 
      fcase(
        is.na(mode_name) & 
          !str_detect(device_name, "trach") &
          tidal_volume_set > 0 & 
          resp_rate_set > 0,
        "cmv/ac",
        rep_len(TRUE, length(mode_name)), mode_name)
  ) |> 
  
  
  # when there are duplicate times...
  group_by(clif_hospitalizations_joined_id, recorded_dttm) |> 
  
  # when bipap is part of a duplicate we need to get rid of it... 
  #     its usually when a vent is STARTED and device is carried over but it goes to a new line with lots of NAs
  #     the NA line above has the vent settings.  Its best to just drop the nippv line when its a duplicate
  #     if we don't do this... the vent settings get sent backwards across all bipap

  mutate(n = n()) |>  
  filter(
    #  essentially this is... DROP if n>1 and device_cat == nippv
    !(n > 1 & device_category == "nippv")) |> 
  
  # redo n so we keep vent settings from above... now NAs are bad around other things and we should just drop
  mutate(n = n()) |> 
  filter(
    #  essentially this is... DROP if n>1 and device_cat == NA
    !(n > 1 & is.na(device_category))) |> 
  

  
  # filter if missing everything  
  filter(
    #  essentially this is... DROP if everything missing
    !(is.na(device_category) & 
        is.na(device_name) &
        is.na(mode_category) &
        is.na(mode_name) & 
        is.na(fio2_set) &        # keeps informative fio2_set data around
        is.na(tidal_volume_set)    # keeps vent data around... this happens sort of often
      )) |> 
    
    

  # dropping duplicates for everything else but just taking the first one
  #       ffirst works WAY faster than fill up and down and slicing(1)
  ffirst() |> 
  ungroup() |> # technically don't need this  
    
  ###########
  # TEMP STOP #
  ungroup()
  ###########
  ###########

ni_toc()

```


```{r}

ni_tic()

df_resp_support <- df_resp_support_1 |> 
  
# bring in hour sequences
  bind_rows(hour_sequence) |> 


#~~~~~~~~~~~~~~~~
##~~ Filling in data based on a waterfall of categories to ensure accuracy
#~~~~~~~~~~~~~~~~
  # organizing
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 
  relocate(clif_hospitalizations_joined_id, recorded_dttm, recorded_date, recorded_hour) |> 
  
  # fill forward device category
  group_by(clif_hospitalizations_joined_id) |> 
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 
  fill(device_category) |>
  ungroup() |> 
  
  # Record a new device_category when either (a) a new encounter, or (b) preceded by a...   
  # different device category
  mutate(
    # need to have NA as something so it gets an ID
    device_cat_f = fcase(is.na(device_category), "missing", rep_len(TRUE, length(device_category)), device_category), # cant have anything with NAs when factoring
    device_cat_f = as.integer(as.factor(device_cat_f)), # need an integer for this
    
    # getting IDs
    device_cat_id = fcumsum((
      clif_hospitalizations_joined_id != flag(clif_hospitalizations_joined_id, fill = TRUE) |           # (a)
        device_cat_f  != flag(device_cat_f, fill = TRUE)))) |>       # (b)
  
  relocate(device_cat_id, .after = recorded_hour) |> 
  
  # fill device name
  #         changed some failsafes above 4/2024 so its ok to do downup with this now
  group_by(clif_hospitalizations_joined_id, device_cat_id) |> 
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 
  fill(device_name, .direction = "downup") |> 
  ungroup() |>
  
  
  # Record a new device_id when either (a) a new encounter, or 
  #                                    (b) preceded by a different device name.
  mutate(
    # need to have NA as something so it gets an ID
    device_name_f = fifelse(is.na(device_name), "missing", device_name), # cant have anything with NAs when factoring
    device_name_f = as.integer(as.factor(device_name_f)), # need an integer for this
    
    # getting IDs
    device_id = fcumsum((
      clif_hospitalizations_joined_id    != flag(clif_hospitalizations_joined_id, fill = TRUE) |           # (a)
        device_name_f != flag(device_name_f, fill = TRUE)))) |>      # (b)
  
  relocate(device_id, .after = recorded_hour) |> 
  
  # fill mode_category (downup)
  # there are PST that are being carried over to days before when ppl get REINTUBATED
  group_by(clif_hospitalizations_joined_id, device_id) |> 
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 
  fill(mode_category, .direction = "downup") |> 
  ungroup() |> 
  
  # Create mode_id
  mutate(
    mode_cat_f = fifelse(is.na(mode_category), "missing", mode_category), # cant have anything with NAs when factoring
    mode_cat_f = as.integer(as.factor(mode_cat_f)), # need an integer for this
    
    mode_cat_id = fcumsum((
      device_id     != flag(device_id, fill = TRUE) |        # (a)
        mode_cat_f  != flag(mode_cat_f, fill = TRUE)))) |>   # (b)
  
  
  relocate(mode_cat_id, .after = recorded_hour) |> 
  
  # fill mode name (downup) 
  group_by(clif_hospitalizations_joined_id, mode_cat_id) |> 
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 
  fill(mode_name, .direction = "downup") |> 
  ungroup() |>  
  
  # Create mode name id
  mutate(
    mode_name_f = fifelse(is.na(mode_name), "missing", mode_name), # cant have anything with NAs when factoring
    mode_name_f = as.integer(as.factor(mode_name_f)), # need an integer for this
    
    mode_name_id = fcumsum((
      mode_cat_id != flag(mode_cat_id, fill = TRUE) |               # (a)
        mode_name_f != flag(mode_name_f, fill = TRUE)))) |>         # (b)
  
  relocate(mode_name_id, .after = recorded_hour) |> 
  
  
  # changing fio2_set to 0.21 if room air as category
  mutate(fio2_set = if_else(is.na(fio2_set) & device_category == "room air", 21, fio2_set)) |> 
  
  # erroneous set volumes are in places where they shouldn't be for PS and trach_dome
  mutate(
    tidal_volume_set = fifelse(
      (
        mode_category == "pressure support/cpap" &    # needs to be PS/CPAP
          !is.na(pressure_support_set)                    # needs to have a PS level
      ) |
        (
          is.na(mode_category) &                      # mode cat needs to be NA
            str_detect(device_name, "trach")          # only when trach stuff
        ) |
        (
          mode_category == "pressure support/cpap" &  # needs to be PS/CPAP
            str_detect(device_name, "trach")          # only when trach stuff
        ),
      NA_integer_,
      tidal_volume_set),
    
    
  ) |>
  
  # there are ppl with t-piece that should be blow_by
  mutate(mode_category = fifelse(
    (is.na(mode_category) & 
       str_detect(device_name, "t-piece")),
    "blow by",
    mode_category
  )) |> 
  
  # carry forward the rest
  group_by(clif_hospitalizations_joined_id, mode_name_id) |>  # mode_name_id is the most granular, can go up and down
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 
  
  # took trach out of this so we don't fill back up 3/2024
  fill(c(fio2_set, lpm_set, peep_set, tidal_volume_set, pressure_support_set, resp_rate_set, tidal_volume_obs, peak_inspiratory_pressure_obs,  minute_vent_obs, 
         hospital_id, location_name, location_category, in_dttm, out_dttm
  ), .direction = "downup"
  ) |>
  
  # fill trach... only down
  fill(c(tracheostomy), .direction = "down") |>
  ungroup() |> 
  
  # need to get rid of duplicates 
  distinct() |> 
  dplyr::select(
    clif_hospitalizations_joined_id,
    recorded_dttm,
    recorded_date,
    recorded_hour,
    mode_name_id,
    device_category,
    device_name,
    mode_category,
    mode_name,
    mode_cat_id,
    device_id,
    device_cat_id,
    fio2_set,
    lpm_set,
    peep_set,
    tracheostomy,
    tidal_volume_set,
    pressure_support_set,
    resp_rate_set,
    tidal_volume_obs,
    starts_with("mean_airway_pressure_obs"),
    peak_inspiratory_pressure_obs,
    plateau_pressure_obs,
    # obs_resp_rate,
    minute_vent_obs,
    hospital_id,
    location_name,
    location_category,
    # in_dttm,
    # out_dttm,
    # device_cat_f,
    # device_name_f,
    # mode_cat_f,
    # mode_name_f,
  ) 

ni_toc()
```


## Vitals / ibw / labs

```{r}

######################
##~~ clean vitals and get ibw
######################

# # quickly get back to things without doing the above
# if(!exists("df_resp_support")){
#   load("output/intermediate/most_recent_save_resp.Rdata")
# 
#   df_resp_support <- read_parquet(paste0("output/intermediate/df_resp_support_", most_recent_save_resp,".parquet"))
# }

##~~~~~~~~~~~~~
##~~ spo2
##~~~~~~~~~~~~~

df_spo2 <- clif_vitals |> 
  
  # getting spo2
  filter(vital_category == "spo2") |> 
  
  # making those columns
  pivot_wider(
    id_cols = c(clif_hospitalizations_joined_id, recorded_dttm),
    names_from = vital_category,
    values_from = vital_value,
    values_fn = function(x) mean(x, na.rm = TRUE)
  ) |> 
  
  # getting date so we can group by this
  mutate(recorded_date = date(recorded_dttm),
         recorded_hour = hour(recorded_dttm)) |> 
  
  # taking the min spo2 by  DAY and HOUR and ENCOUNTER 
  group_by(clif_hospitalizations_joined_id, recorded_date, recorded_hour) |> 
  summarise(spo2 = fmin(spo2, na.rm = TRUE)) |> 
  ungroup() |> 
  dplyr::select(clif_hospitalizations_joined_id, recorded_date, recorded_hour, spo2)
  

##~~~~~~~~~~~~~
##~~ po2_arterial / so2_arterial
##~~~~~~~~~~~~~

df_po2_arterial <-  clif_labs |> 
    filter(lab_category %in% c("po2_arterial",
                             "so2_arterial")) |> 
  # going to use collected_time and not result time because its important when doing PF ratios
  # also important because we are doing daily LAPS2, so its key is when its collected
  dplyr::select(clif_hospitalizations_joined_id, recorded_dttm = lab_collect_dttm, lab_category, lab_value_numeric) |>

  # getting po2_arterial / so2_arterial
  pivot_wider(
    id_cols = c(clif_hospitalizations_joined_id, recorded_dttm),
    names_from = lab_category,
    values_from = lab_value_numeric,
    values_fn = function(x) mean(x, na.rm = TRUE)
  ) |> 
  
    # getting date so we can group by this
  mutate(recorded_date = date(recorded_dttm),
         recorded_hour = hour(recorded_dttm)) |> 
  
  # grouping by day
  group_by(clif_hospitalizations_joined_id, recorded_date) |> 
  summarise(po2_arterial = fmin(po2_arterial, na.rm = TRUE),
            so2_arterial = fmin(so2_arterial, na.rm = TRUE)
            ) |> 
  ungroup() |> 
      # getting date so we can group by this
  mutate(recorded_hour = hour(recorded_date)) |> 
  dplyr::select(clif_hospitalizations_joined_id, recorded_date, recorded_hour, po2_arterial, so2_arterial)

##~~~~~~~~~~~~~
##~~ ibw
##~~~~~~~~~~~~~

df_ibw <- clif_vitals |> 
  
  # getting height and spo2
  filter(vital_category == "height_cm") |> 
  mutate(height_in = vital_value / 2.54) |> 
  # 
  # # making those columns
  # pivot_wider(
  #   id_cols = c(clif_hospitalizations_joined_id, recorded_dttm),
  #   names_from = vital_category,
  #   values_from = vital_value,
  #   values_fn = function(x) mean(x, na.rm = TRUE)
  # ) |> 
  
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 

  group_by(clif_hospitalizations_joined_id) |> 
  
  # taking the first height DAY and ENCOUNTER
  summarise(height_in = ffirst(height_in, na.rm = TRUE)) |> 
  ungroup() |> 
  
  # get biological sex_category
  left_join(clif_patient |> 
             dplyr::select(clif_hospitalizations_joined_id, sex_category)
            ) |> 
  
  # Calculate ibw for males
  mutate(ibw = fifelse(sex_category == "male" & height_in > 56, 50 + (2.3 * (height_in - 60)), NA_real_)) |>  # 1st % of male = 60 inches
  
  # Calculate ibw for females
  mutate(ibw = fifelse(sex_category == "female" & height_in > 56, 45.5 + (2.3 * (height_in - 60)), ibw)) |>  # 1st % of female = 56 inches
  
  # Remove records with height less than 40
  # This also removes those without a height for the whole admission, which is ok... can't do LTVV without height known
  filter(height_in >= 40) |>  # assumming these are kiddos and/or amputees which means IBW will be inaccurate
  group_by(clif_hospitalizations_joined_id) |> 
  
  # using first ibw for the encounter
  mutate(ibw = ffirst(ibw, na.rm = TRUE)) |> 
  
  # getting only the variables we want
  dplyr::select(clif_hospitalizations_joined_id, ibw, sex_category) |> 
  ungroup() |> 
  distinct()


```


## Trach Variation

```{r}

   # getting trach hospital (first one with trach == 1)
trach_hospital_id <- df_resp_support |> 
  filter(tracheostomy == 1) |> 
  dplyr::select(clif_hospitalizations_joined_id, recorded_date, trach_hospital_id = hospital_id) |> 
  arrange(clif_hospitalizations_joined_id, recorded_date) |> 
  group_by(clif_hospitalizations_joined_id) |> 
  mutate(trach_hospital_id = ffirst(trach_hospital_id)) |> 
  dplyr::select(clif_hospitalizations_joined_id, trach_hospital_id) |> 
  distinct() 

  # get the first trach day by encounter only
trach_day1 <- df_resp_support |> 
  filter(tracheostomy == 1) |> 
  dplyr::select(clif_hospitalizations_joined_id, recorded_date) |> 
  arrange(clif_hospitalizations_joined_id, recorded_date) |> 
  group_by(clif_hospitalizations_joined_id) |> 
  mutate(trach_day1 = fmin(recorded_date, na.rm = TRUE)) |> 
  dplyr::select(clif_hospitalizations_joined_id, trach_day1) |> 
  distinct() 

  # get the first ventilator day by encounter only
vent_day1 <- df_resp_support |> 
  filter(device_category == "imv") |> 
  dplyr::select(clif_hospitalizations_joined_id, recorded_date) |> 
  arrange(clif_hospitalizations_joined_id, recorded_date) |> 
  group_by(clif_hospitalizations_joined_id) |> 
  mutate(vent_day1 = fmin(recorded_date, na.rm = TRUE)) |> 
  dplyr::select(clif_hospitalizations_joined_id, vent_day1) |> 
  distinct() 
  
df_trach_variation <- df_resp_support |> 
  # keep encounters that have a tracheostomy
  mutate(tracheostomy_max = fmax(tracheostomy, na.rm = TRUE),
         .by = clif_hospitalizations_joined_id) |> 
  filter(tracheostomy_max == 1) |> 
  
  # getting vent days or trach days ONLY
  filter(device_category == "imv" | tracheostomy == 1) |> 
  
  dplyr::select(clif_hospitalizations_joined_id, recorded_date, tracheostomy) |> 
  distinct() |> 
  
  arrange(clif_hospitalizations_joined_id, recorded_date) |> 
  
  # getting vent day count
  ungroup() |> 
  
  # getting vent day count because some ppl might have days OFF the vent in between if we just do min(vent_day)
  group_by(clif_hospitalizations_joined_id) |> 
  
  # this will give 1, 2, 3, 4, 5 as long as its the same clif_hospitalizations_joined_id and trach is NA
  # once trach == 1 it parks at that max number so we can just take max
  # also... we can drop those with vent_day_count == 0 because that means they had the trach on vent day 1!!!
  mutate(vent_day_count = fcumsum(
    is.na(tracheostomy)
  )) |> 
  left_join(trach_day1) |> 
  left_join(vent_day1) |> 
  left_join(trach_hospital_id) |> 
  
  # get rid of those with zero vent_day_count (aka they were trached the whole time)
  filter(vent_day_count > 0) |> 
  dplyr::select(clif_hospitalizations_joined_id, trach_hospital_id, trach_day1, vent_day1, vent_day_count) |> 
  mutate(vent_day_count_max = max(vent_day_count, na.rm = TRUE)) |> 
  
  # true "trach_day" is vent_day_count_max - 1 because we didn't have a vent_day_zero... we started at 1
  mutate(vent_days_before_trach = vent_day_count_max - 1) |> 
  
  mutate(
  trach_day = difftime(trach_day1, vent_day1, units = "days")
    ) |>
  dplyr::select(clif_hospitalizations_joined_id, trach_hospital_id, vent_days_before_trach) |> 
  ungroup() |>
  distinct()

df_trach_variation |> glimpse()



#### should we get earliest trach and DROP everything after?
  
```


## CLIF hourly level data

```{r}

##~~~~~~~~~~~~~
##~~ Hourly Data
##~~~~~~~~~~~~~

df_hourly_resp_support1 <- df_resp_support |> 
  mutate(recorded_month = month(recorded_dttm),
         recorded_year = year(recorded_dttm)) |> 
  
  #~~ use recorded time to arrange these in order
  arrange(clif_hospitalizations_joined_id, recorded_dttm) |> 
  
  # change recorded_dttm to be the same thing at the end of the hour so we can do calculations later
  group_by(clif_hospitalizations_joined_id, recorded_date, recorded_hour) |> 
  mutate(recorded_dttm_hour_end = flast(recorded_dttm)) |> 
  ungroup() |> 
  
  #~~ vent sequence variable
      # only go up in number if (a) new category & (b) its a vent category
      # could add a gap to this as well for like hours and such
  arrange(clif_hospitalizations_joined_id, recorded_date) |> 
  mutate(gap_vent_hours = fifelse(
    device_category == "imv" | tracheostomy == 1,
    as.numeric(difftime(lead(recorded_dttm_hour_end), recorded_dttm_hour_end, units = "hours")),
    NA_real_
  )) |> 
  
  group_by(clif_hospitalizations_joined_id) |> 
  mutate(
    device_category_f = fifelse(is.na(device_category), "missing", device_category), # cant have anything with NAs when factoring
    device_category_f = as.integer(as.factor(device_category_f)), # need an integer for this
    
    # you step to the next vent sequence if
    #    1) its a vent
    #    2) its a NEW device cat
    #    3) trach is na
    #    4) gap is <= 6 between current and LEAD vent hours
    vent_episode_id = fcumsum(
      device_category == "imv" & 
        flag(device_category_f, fill = TRUE) != device_category_f &
        is.na(tracheostomy) & 
        gap_vent_hours <= 6    # this deals with the difference between the lead and the current vent_hours
      )) |> 
  ungroup() 

df_hourly_resp_support2 <- df_hourly_resp_support1 |> 
  
  # currently those with trach right away are zeros for vent_id
  # those without vent or were subsequent after vent are currently the same number as the vent before
  mutate(
    # change those not with trach/vent to NA
    vent_episode_id = fifelse(
      device_category == "imv" | tracheostomy == 1,
      vent_episode_id,
      NA_real_
    ),
    
    # we could also drop these patients if we wanted to 
    # change those trach'd on day1 without vent beforehand to enc_sequence 1
    vent_episode_id = fifelse(
      tracheostomy == 1 & vent_episode_id == 0,
      1,
      vent_episode_id
    )
  ) |> 
  
  # getting vent hour per sequence
  group_by(clif_hospitalizations_joined_id, vent_episode_id) |> 
  mutate(vent_episode_hour_seq = fcumsum(
    recorded_dttm_hour_end != flag(recorded_dttm_hour_end, fill = TRUE))
  ) |>
  # fix those not vent back to NA
  mutate(vent_episode_hour_seq = fifelse(is.na(vent_episode_id), NA_real_, vent_episode_hour_seq)) |> 
  
  
  # get max hours per vent sequence... want to drop those <=24
  mutate(vent_episode_duration_hours = fmax(vent_episode_hour_seq, na.rm = TRUE)) |>
  
  ungroup() |> 
  
  # getting vent hour per sequence per hospital
  #   there are times when that episode crosses hospitals
  #   for hospital summary we need duration split up by hospital
  group_by(clif_hospitalizations_joined_id, vent_episode_id, hospital_id) |> 
  mutate(vent_episode_hospital_hour_seq = fcumsum(
    recorded_dttm_hour_end != flag(recorded_dttm_hour_end, fill = TRUE))
  ) |> 
  
  
  # fix those not vent back to NA
  mutate(vent_episode_hospital_hour_seq = fifelse(is.na(vent_episode_id), NA_real_, vent_episode_hospital_hour_seq)) |> 
  
  
  # get max hours per vent sequence... want to drop those <=24
  mutate(vent_episode_hospital_duration_hours = fmax(vent_episode_hospital_hour_seq, na.rm = TRUE)) |>
  
  ungroup() |> 
  

  # final variables
  dplyr::select(
  clif_hospitalizations_joined_id,
  recorded_date,
  recorded_hour,
  recorded_dttm_hour_end,
  vent_episode_id,
  vent_episode_hour_seq,
  vent_episode_duration_hours,
  vent_episode_hospital_hour_seq,
  vent_episode_hospital_duration_hours,
  # recorded_dttm,
  device_category,
  device_name,
  mode_category,
  mode_name,
  fio2_set,
  recorded_month,
  recorded_year,
  peep_set,
  tracheostomy,
  tidal_volume_set,
  hospital_id,
  location_name,
  location_category,
  pressure_support_set,
  resp_rate_set,
  tidal_volume_obs,
  starts_with("mean_airway_pressure_obs"),
  peak_inspiratory_pressure_obs,
  plateau_pressure_obs,
  # obs_resp_rate,
  minute_vent_obs,
  ) |>
  
  #~~ group by hour so that we can take the first time point to get our information
  # this will only keep the first row if there are duplicates
  distinct(clif_hospitalizations_joined_id, recorded_date, recorded_hour, .keep_all = TRUE) |> 
  left_join(df_ibw) |> 
  left_join(df_spo2) |> 
  
  # those without ibw need to be dropped... they won't have biological sex either (this drops whole encounters)
  filter(!is.na(ibw)) |> 
  
  group_by(clif_hospitalizations_joined_id) |>
  arrange(clif_hospitalizations_joined_id, recorded_dttm_hour_end) |> 

  
  # getting each hour in sequence of their hospital stay
  mutate(enc_hour_seq = fcumsum(recorded_dttm_hour_end != flag(recorded_dttm_hour_end, fill = TRUE))) |>
  
  # getting the CALENDAR sequence... purely based on date... so day 1 can be 3 hours
  mutate(enc_calendar_date_seq = fcumsum(recorded_date != flag(recorded_date, fill = TRUE))) |>
  
  # getting DAY sequence based on which hour it is... so everyone will be 24 hours in for day 1 etc
  # Will mainly use this metric to use
  mutate(enc_day_seq = ceiling(enc_hour_seq/24)) |> 
  ungroup() |> 
  
  # merge trach variation data
  left_join(df_trach_variation) |> 
  filter(!is.na(hospital_id))


ni_toc()
  
df_hourly_resp_support <- df_hourly_resp_support2 |> 
   # final variables
    dplyr::select(
      clif_hospitalizations_joined_id,
      recorded_date,
      recorded_hour,
      # recorded_dttm_hour_end,
      vent_episode_id,
      vent_episode_hour_seq,
      vent_episode_duration_hours,
      vent_episode_hospital_hour_seq,
      vent_episode_hospital_duration_hours,
      device_category,
      device_name,
      mode_category,
      mode_name,
      fio2_set,
      recorded_month,
      recorded_year,
      peep_set,
      pressure_support_set,
      tracheostomy,
      tidal_volume_set,
      hospital_id,
      location_name,
      location_category,
      ibw,
      sex_category,
      spo2,
      enc_hour_seq,
      enc_calendar_date_seq,
      enc_day_seq,
      trach_hospital_id,
      vent_days_before_trach
      )


# duplicate check
# df_hourly_resp_support |> group_by(pick(colnames(df_hourly_resp_support))) |> filter(n() > 1) 


# 
# 
# write_parquet(df_hourly_resp_support, paste0("output/intermediate/df_hourly_resp_support_", Sys.Date(), ".parquet"))
# 
# # saving system date today
# most_recent_save_hourly <- Sys.Date()
# save(most_recent_save_hourly, file = "output/intermediate/most_recent_save_hourly.Rdata")


hosp_id_count <- df_hourly_resp_support |> count(hospital_id) |> nrow()



```



## Intermediate save

```{r}
# Define the function
save_data_frames <- function(data_frame_names, output_dir = "output/intermediate/clean_db") {
  # Ensure the output directory exists
  if (!dir.exists(output_dir)) {
    dir.create(output_dir, recursive = TRUE)
  }
  
  # Save the current date
  most_recent_save_resp <- Sys.Date()
  save(most_recent_save_resp, file = file.path(output_dir, "most_recent_save_resp.Rdata"))
 
  
  # Iterate over each data frame name
  for (df_name in data_frame_names) {
    # Check if the data frame exists in the global environment
    if (exists(df_name, envir = .GlobalEnv)) {
      # Get the data frame
      df <- get(df_name, envir = .GlobalEnv)
      
      # Construct the output file path
      output_file <- file.path(output_dir, paste0(df_name, "_.", Sys.Date(), ".parquet"))
      
      # Save the data frame to Parquet
      arrow::write_parquet(df, output_file)
      
      # Optional: Print a message
      message("Saved ", df_name, " to ", output_file)
    } else {
      warning("Data frame '", df_name, "' does not exist in the global environment.")
    }
  }
}

# List of data frame names
data_frames_to_save <- 
  c(
   "clif_adt",
   "clif_demographics_combined",
   "clif_gcs",
   "clif_hospitalization",
   "clif_hospitalization_start",
   "clif_labs",
   "clif_patient",
   "clif_patient_assessments",
   "clif_patient_start",
   "clif_respiratory_support",
   "clif_vitals",
   "df_cohort_keep",
   "df_hourly_resp_support",
   "df_ibw",
   "df_po2_arterial",
   "df_resp_support",
   "df_resp_support_1",
   "df_spo2",
   "df_trach_variation",
   "hospital_order")
 
save(data_frames_to_save, file = file.path("output/intermediate/clean_db/data_frames_to_save.Rdata"))

# Call the function
save_data_frames(data_frames_to_save)
```


```{r}
message("##########################################
You have completed Cohorting!!! Woohooo!!! \n You also have saved your data \n Please proceed on to 02_statistical_analysis script \n 
FYI you can JUST run the 02_stats script if no changes are made to the cohort script in the future!!
##########################################")
```


