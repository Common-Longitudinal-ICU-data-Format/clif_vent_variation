---
title: "Variation in Ventilation Abstract ATS 2024"
author: Nick Ingraham
date: today
execute: 
  echo: false
format: 
  html:
    embed-resources: true
    number-sections: true
    toc: true
    html-q-tags: true
    code-fold: true
bibliography: references.bib
csl: american-journal-of-respiratory-and-critical-care-medicine.csl
editor: source
editor_options: 
  chunk_output_type: console
---

# Setup
## Run r script to get functions and libraries

```{r}

## Loading in the beginning stuff
if(!exists("site_name")) {
  source("code/00_renv_restore.R")
}
 
```

## In Main Script... Run all above `IMPORT`

```{r}

# Step 1: List all CSV files in the directory
files <- list.files(path = "aggregate_data", pattern = "\\.csv$", full.names = TRUE)

# Step 2: Function to extract base name using double underscore
extract_base_name <- function(file_path) {
  file_name <- basename(file_path)
  # Remove .csv extension
  file_name_no_ext <- sub("\\.csv$", "", file_name)
  # Split by double underscore
  parts <- strsplit(file_name_no_ext, "__")[[1]]
  if (length(parts) < 2) {
    stop(paste("Filename does not contain double underscore '__':", file_name))
  }
  # The base name is the part before the double underscore
  base_name <- parts[1]
  return(base_name)
}

# Step 3: Get base names and group files
base_names <- sapply(files, extract_base_name)
files_df <- data.frame(file = files, base_name = base_names, stringsAsFactors = FALSE)
file_groups <- split(files_df$file, files_df$base_name)

# Prepare hospital table summary with `system_hospital`
hospital_table1_summary <- hospital_table1_summary |> 
  mutate(health_system = sub("Hospital\\s+(.*?)\\s+\\d+", "\\1", Hospital)) |> 
  group_by(health_system, Hospital) |> 
  mutate(Hospital_ID = cur_group_id()) |> 
  ungroup() |> 
  group_by(health_system) |> 
  mutate(Health_system_ID = cur_group_id()) |> 
  ungroup() |> 
  mutate(system_hospital = paste("System", Health_system_ID, "Hosp", Hospital_ID))

system_hospital <- hospital_table1_summary |> 
  select(hospital_id = Hospital, system_hospital) |> 
  distinct() |> 
  mutate(hospital_id = str_to_lower(hospital_id))

# Function to replace "hospital_id" fields with `system_hospital`
replace_hospital_id <- function(df) {
  # Identify columns that start with "hospital_id"
  hospital_id_cols <- grep("^hospital_id", names(df), value = TRUE)
  
  for (col in hospital_id_cols) {
    # Lowercase the hospital_id values in df for consistent joins
    df[[col]] <- str_to_lower(df[[col]])
    # Join to get `system_hospital` by original hospital_id values
    df <- df |> 
      left_join(system_hospital, by = setNames("hospital_id", col)) |> 
      # Replace original column with `system_hospital`
      mutate(!!col := system_hospital) |> 
      select(-system_hospital)
  }
  return(df)
}

# Step 4: Read, combine, and replace hospital_id in files for each group
data_list <- lapply(file_groups, function(file_paths) {
  data_frames <- lapply(file_paths, function(file_path) {
    df <- read.csv(file_path)
    # Apply the replace function to each dataframe
    df <- replace_hospital_id(df)
    return(df)
  })
  combined_data <- bind_rows(data_frames)
  return(combined_data)
})

# Step 5: Load each combined data into the global environment
list2env(data_list, envir = .GlobalEnv)
# 
# 
# # getting health system into the Mix
# 
# hospital_table1_summary <- hospital_table1_summary |> 
#   mutate(health_system = sub("Hospital\\s+(.*?)\\s+\\d+", "\\1", Hospital)) |> 
#   group_by(health_system, Hospital) |> 
#   mutate(Hospital_ID = cur_group_id()) |> 
#   ungroup() |> 
#   group_by(health_system) |> 
#   mutate(Health_system_ID = cur_group_id()) |> 
#   ungroup() |> 
#   mutate(system_hospital = paste("System", Health_system_ID, "Hosp", Hospital_ID))
# 
# 
# system_hospital <- hospital_table1_summary |> 
#   select(hospital_id = Hospital,
#          system_hospital) |> distinct() |> 
#   mutate(hospital_id = str_to_lower(hospital_id))
#   

```



## Table 1

```{r}
hospital_table1_summary |> kable() 
```

## Mode Graph

```{r}

# already rolled up... no need to change
mode_hospital_summary_table <- mode_hospital_summary_table |> 
  # mutate(hospital_id = str_to_lower(hospital_id)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id = system_hospital) |>
    # Normalizing counts AGAIN with all hospitals now in the data
  mutate(normalized_count = count / fmax(count, na.rm = TRUE),
         # need to have NA in the data given its in the universal aesthetic
         mode_category = NA)  |> 
  arrange(-count) 

mode_hosp_order <- mode_hospital_summary_table |> select(hospital_id) |> pull()


# uncount
mode_hourly_resp_support <- mode_hourly_resp_support_table |> 
  # mutate(hospital_id = str_to_lower(hospital_id_graph)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id_graph = system_hospital) |> 
  mutate(hospital_id_graph = factor(hospital_id_graph, levels = mode_hosp_order)) |> 
    mutate(mode_category = fcase(
              mode_category == "assist control-volume control",      "assist control-volume control", 
              mode_category == "pressure support/cpap",              "pressure support/cpap", 
              mode_category == "pressure-regulated volume control",  "pressure-regulated volume control",
              mode_category == "pressure control",                   "pressure control", 
              mode_category == "simv",                               "simv", 
              mode_category == "blow by",                            "other",
              mode_category == "other",                              "other",
              mode_category == "aprv",                               "other",
              default = "other"
  )) |> 
  mutate(mode_category = str_to_title(mode_category)) |> 
  mutate(mode_category = factor(mode_category, levels = c(
    "Assist Control-Volume Control",
    "Pressure Support/Cpap",
    "Pressure-Regulated Volume Control",
    "Pressure Control",
    "Simv",
    "Other", ordered = TRUE))) |> 
  uncount(n) |> 
  arrange(mode_category) 



plot_mode_hourly_resp_support <- 
  ggplot(
  mode_hourly_resp_support,  aes(x = hospital_id_graph, fill = mode_category)) +
  geom_bar(position = "fill") +
  # Use labs to add a title and remove the axis labels
  labs(title = "Ventilator Modes by Hospital in the first 24 hours", x = "Hospital", y = "Proportion of Mode Category") + 
  # Use theme_minimal to create a minimal theme
  theme_minimal() +
  # adjusting tick marks for x axis
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
  # Add the summary data as a layer with a dummy aesthetic for color
  geom_point(data = mode_hospital_summary_table, aes(x = hospital_id, y = normalized_count, color = "Total Counts"), size = 3) +
  # Add horizontal lines at the height of each point, only spanning the width of the bar
  geom_errorbar(data = mode_hospital_summary_table, aes(x = hospital_id, ymin = normalized_count, ymax = normalized_count, group = 1, color = "Total Counts"),
                width = 0.9,  # Adjust this value to change the width of the horizontal lines
                linewidth = 0.5) +  # Adjust size for line thickness
  # geom_line(data = mode_hospital_summary_table, aes(x = hospital_id_graph, y = normalized_count, group = 1, color = "Total Counts"), linewidth = 1) +
  # Customize the legend for the dummy aesthetic
  scale_color_manual(name = "Legend", values = c("Total Counts" = "black"),
                     labels = c("Total Counts" = "Total Mode Counts (Normalized)")) +
  guides(fill = guide_legend(title = "Ventilator Mode Category", override.aes = list(color = NA)), 
         color = guide_legend(title = "")) +
  scale_fill_discrete(breaks = 
                        c("Assist Control-Volume Control",
                          "Pressure Support/Cpap",
                          "Pressure-Regulated Volume Control",
                          "Pressure Control",
                          "Simv",
                          "Other"))




plot_mode_hourly_resp_support

```

## LTVV

```{r}
# This is the first 24 hours ventilation
ltvv_variation <- ltvv_variation_table |> 
  
  # mutate(hospital_id = str_to_lower(hospital_id)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id = system_hospital) |>
  
  uncount(n) |> 
    mutate(
    vt_bin = factor(vt_bin, levels = rev(c("< 4 cc/kg", "4-5 cc/kg",
                                           "5-6 cc/kg", "6-7 cc/kg",
                                           "7-8 cc/kg" , "8-9 cc/kg",
                                           "9-10 cc/kg", "10-11 cc/kg",
                                           "11-12 cc/kg", ">= 12 cc/kg")))
  ) 
  


icu_hosp_ranks_8cc <- ltvv_variation |> 
  group_by(hospital_id) |> 
  mutate(count_hosp = n()) |> 
  group_by(hospital_id, vt_bin, count_hosp) |> 
  summarise(count_bin = n()) |> 
  ungroup() |>
  mutate(htvv = fcase(
    vt_bin %in% c("8-9 cc/kg","9-10 cc/kg", "10-11 cc/kg", "11-12 cc/kg", ">= 12 cc/kg"), 1,
    default = 0)) |> 
  group_by(hospital_id) |> 
  mutate(pct_over_8 = sum(htvv*count_bin) / count_hosp) |> 
  dplyr::select(hospital_id, pct_over_8) |> 
  distinct() |>
  arrange(pct_over_8) |>  
  pull(hospital_id)



ltvv_variation |> 
  filter(hospital_id %in% icu_hosp_ranks_8cc) |> 
  mutate(hospital_id = factor(hospital_id, levels = rev(icu_hosp_ranks_8cc))) |> 
  ggplot(aes(y = hospital_id, fill = vt_bin )) + 
  geom_bar(position = "fill") + 
  scale_fill_brewer(palette = "RdYlBu", direction = 1) +
  ggthemes::theme_gdocs() + 
  labs(x = "Percentage of patient-hours of volume control ventilation",
       y = "Hospital",
       fill = "")



```


## Sex_category / LTVV 

```{r}

ltvv_female <- ltvv_female_table |> 
  
  # mutate(hospital_id = str_to_lower(hospital_id)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id = system_hospital) |>
  # 
  uncount(n) 


icu_hosp_ranks_8cc_female <- ltvv_female |> 
  filter(sex_category == "female") |> 
  group_by(hospital_id) |> 
  mutate(count_hosp = n()) |> 
  group_by(hospital_id, vt_bin, count_hosp) |> 
  summarise(count_bin = n()) |> 
  ungroup() |>
 mutate(htvv = fcase(
    vt_bin %in% c("8-9 cc/kg","9-10 cc/kg", "10-11 cc/kg", "11-12 cc/kg", ">= 12 cc/kg"), 1,
    default = 0)) |> 
  group_by(hospital_id) |> 
  mutate(pct_over_8 = sum(htvv*count_bin) / count_hosp) |> 
  dplyr::select(hospital_id, pct_over_8) |> 
  distinct() |>
  arrange(pct_over_8) |>  
  pull(hospital_id)



###### Main Figure how Male vs Female by Category
summary_data_bar <- ltvv_female_table %>%
  filter(hospital_id %in% icu_hosp_ranks_8cc) |> 
  mutate(hospital_id = factor(hospital_id, levels = rev(icu_hosp_ranks_8cc_female))) |> 
  group_by(hospital_id, sex_category) %>%
  mutate(
    total_n = sum(n),
    proportion = n / total_n
  ) %>%
  ungroup() |> 
  mutate(
    vt_bin = factor(vt_bin, levels = rev(c("< 4 cc/kg", "4-5 cc/kg",
                                           "5-6 cc/kg", "6-7 cc/kg",
                                           "7-8 cc/kg" , "8-9 cc/kg",
                                           "9-10 cc/kg", "10-11 cc/kg",
                                           "11-12 cc/kg", ">= 12 cc/kg")))
  ) 


  
# Define a custom color palette
custom_colors <- c(
  "< 4 cc/kg" = "darkgreen",
  "4-5 cc/kg" = "green",
  "5-6 cc/kg" = "lightgreen",
  "6-7 cc/kg" = "lightgreen",
  "7-8 cc/kg" = "lightblue",
  "8-9 cc/kg" = "yellow",       # Highlight this bin
  "9-10 cc/kg" = "orange",         # Higher than 8-9 cc/kg
  "10-11 cc/kg" = "red",
  "11-12 cc/kg" = "red",
  ">= 12 cc/kg" = "darkred"     # Highest category
)


# Proportional bar chart
ggplot(summary_data_bar, aes(x = proportion, y = hospital_id, fill = vt_bin)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ sex_category, 
    labeller = as_labeller(str_to_title)  # Capitalize facet labels
    ) +
  labs(
    title = "Proportion of Tidal Volume Categories by Hospital and Sex",
    x = "Tidal Volume per IBW (%)",
    y = "",
    fill = "Tidal Volume Category"
  ) +
  scale_fill_brewer(palette = "RdYlBu", direction = 1) +
  
  # scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  # Angle x-axis labels for better readability
    legend.title = element_text(size = 10, face = "bold"),
    plot.title = element_text(size = 16, face = "bold"),
    strip.text = element_text(size = 12, face = "bold"),  # Make facet labels bold

    legend.position = "top",
    legend.direction = "horizontal"  # Set legend direction to horizontal
  ) +
  guides(fill = guide_legend(nrow = 1, byrow = TRUE, reverse = TRUE))  # Make legend have one row






```

## Mortality Models

```{r}


# Ensure that 'term', 'variable', and 'site' are factors for plotting purposes
model_coefficients <- model_coefficients %>%
  mutate(
    term = as.factor(term),
    variable = as.factor(variable),
    site = as.factor(site)
  ) |> 
    mutate(significant = ifelse(p.value < 0.05, "Yes", "No"))


# Filter out the intercept term if not needed
# model_coefficients <- model_coefficients %>%
#   filter(term != "(Intercept)")

# Adjust the levels of 'term' for better ordering (optional)
term_order <- model_coefficients %>%
  group_by(term) %>%
  summarize(mean_estimate = mean(estimate, na.rm = TRUE)) %>%
  arrange(desc(mean_estimate)) %>%
  pull(term)

model_coefficients$term <- factor(model_coefficients$term, levels = term_order)

# Set a custom theme
custom_theme <- theme_bw(base_size = 12) +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12),
    legend.position = "bottom",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10)
  )

# Plot comparing variables across all sites
plot1 <- ggplot(model_coefficients, aes(x = term, y = estimate, ymin = conf.low, ymax = conf.high, color = variable, shape = significant)) +
  geom_pointrange(position = position_dodge(width = 0.6)) +
  facet_wrap(~ site, scales = "free_y") +
  scale_y_log10() +
  coord_flip() +
  labs(
    title = "Comparison of Variables Across Sites",
    x = "Predictor Variable",
    y = "Odds Ratio (log scale)",
    color = "Variable"
  ) +
  custom_theme

# Display the plot
print(plot1)

# Save the plot
ggsave("output/final/variables_across_sites.png", plot = plot1, width = 10, height = 8, dpi = 300)

# Plot comparing the same variable across different sites
plot2 <- ggplot(model_coefficients, aes(x = site, y = estimate, ymin = conf.low, ymax = conf.high, color = site, shape = significant)) +
  geom_pointrange(position = position_dodge(width = 0.6)) +
  facet_wrap(~ term, scales = "free_y") +
  scale_y_log10() +
  coord_flip() +
  labs(
    title = "Effect of Each Predictor Variable Across Sites",
    x = "Site",
    y = "Odds Ratio (log scale)",
    color = "Site"
  ) +
  custom_theme

# Display the plot
print(plot2)

# Save the plot
ggsave("output/final/variables_by_site.png", plot = plot2, width = 10, height = 8, dpi = 300)




```

## Daily Mortality Models

```{r}

# Define the directory containing the CSV files
data_dir <- "aggregated_data"

# List all CSV files that match the pattern 'model_coefficients__*.csv'
files <- list.files(path = data_dir, pattern = "^model_coefficients_daily__.*\\.csv$", full.names = TRUE)

# Read all CSV files and combine them into a single data frame
model_coefficients_list <- lapply(files, read_csv)

# Combine all data frames into one
model_coefficients <- bind_rows(model_coefficients_list)

# Ensure that 'term', 'variable', and 'site' are factors for plotting purposes
model_coefficients <- model_coefficients %>%
  mutate(
    term = as.factor(term),
    variable = as.factor(variable),
    site = as.factor(site)
  ) %>%
  filter(term != "(Intercept)")  # Exclude intercept term

# Create forest plots
ggplot(model_coefficients, aes(x = term, y = estimate, ymin = conf.low, ymax = conf.high, color = variable)) +
  geom_pointrange(position = position_dodge(width = 0.6)) +
  facet_wrap(~ site, scales = "free_y") +
  scale_y_log10() +
  coord_flip() +
  labs(
    title = "Comparison of Variables Across Sites",
    x = "Predictor Variable",
    y = "Odds Ratio (log scale)",
    color = "Variable"
  ) +
  theme_bw(base_size = 12) +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12),
    legend.position = "bottom",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10)
  )

# Save the plot
ggsave("output/final/variables_across_sites.png", width = 10, height = 8, dpi = 300)
```

## Sex_category point estimates

```{r}
# Get all objects in the environment that start with "model_coefs_sex"
model_objects <- mget(ls(pattern = "^model_coefs_sex"))

# Combine all objects into one dataset
combined_model_coefs_sex <- bind_rows(model_objects, .id = "source")

# View the combined dataset
combined_model_coefs_sex


library(ggplot2)

# Assuming your combined dataset `combined_model_coefs_sex` has columns:
# "StudyID" for different models, "Site" for different sites, "Estimate", "LowerCI", and "UpperCI".
combined_model_coefs_sex |> 
  filter(str_detect(StudyID, "bin")) |> 
  filter(Variable == "sex_categorymale") |> 
ggplot(aes(x = Estimate, y = Site, color = StudyID)) +
  geom_point(position = position_dodge(width = 0.8), size = 3) +  # Plot the point estimates
  geom_errorbarh(aes(xmin = LowerCI, xmax = UpperCI), 
                 position = position_dodge(width = 0.8), height = 0.3) +  # Add horizontal error bars
  labs(x = "Estimate", y = "Site", color = "Model (StudyID)") +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 10),
    legend.position = "top"
  ) +
  scale_fill_brewer(palette = "RdYlBu", direction = 1)
  # scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd"))  # Customize colors if needed


```

## Sex_category / Height Models
```{r}

# Create height quantiles
height_breaks <- c(0, 60, 63, 66, 69, 72, 100)  # Corresponds to < 5 feet, 5-5’3”, 5’3”-5’6”, ..., >6’3”
height_labels <- c("< 5 feet", "5-5’3”", "5’3”-5’6”", "5’6”-5’9”", "5’9”-6’0”", "> 6’3”")


min_height <- round(min(all_predictions$height_inches, na.rm = TRUE))
max_height <- round(max(all_predictions$height_inches, na.rm = TRUE))


# Ensure Model is a factor
all_predictions_continuous <- model_preds_sex_category_height_ltvv |> 
  filter(!str_detect(Model, "Binary")) |> 
  mutate(Model = factor(Model)) |> 
  mutate(sex_category = group) |> 
  mutate(height_inches = x)




# Plot all models together
ggplot(all_predictions_continuous, aes(x = height_inches, y = predicted, color = sex_category)) +
  geom_line(size = 1) +
  facet_wrap(~ Model) +
  labs(
    title = "Predicted VT per kg IBW by Height and Sex Category",
    x = "Height (inches)",
    y = "Predicted VT per kg IBW",
    color = "Sex Category"
  ) +
    scale_x_continuous(
    limits = c(min_height, max_height),
    breaks = height_breaks,
    minor_breaks = NULL  # Remove minor grid lines if desired
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(size = 14, face = "bold"),
    strip.text = element_text(size = 12, face = "bold")
  )



# Ensure Model is a factor
all_predictions_binary <- model_preds_sex_category_height_ltvv |> 
  filter(str_detect(Model, "Binary")) |> 
  mutate(Model = factor(Model)) |> 
  mutate(sex_category = group) |> 
  mutate(height_inches = x)




# Plot all models together
ggplot(all_predictions_binary, aes(x = height_inches, y = predicted, color = sex_category)) +
  geom_line(size = 1) +
  facet_wrap(~ Model) +
  labs(
    title = "Predicted VT per kg IBW by Height and Sex Category",
    x = "Height (inches)",
    y = "Predicted VT per kg IBW",
    color = "Sex Category"
  ) +
    scale_x_continuous(
    limits = c(min_height, max_height),
    breaks = height_breaks,
    minor_breaks = NULL  # Remove minor grid lines if desired
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(size = 14, face = "bold"),
    strip.text = element_text(size = 12, face = "bold")
  )



```


## getting variables for abstract

```{r}


# Total number of critically ill adults
total_patients <- sum(hospital_table1_summary$N, na.rm = TRUE)

# Mean age and standard deviation
mean_age <- mean(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$Age)), na.rm = TRUE)
sd_age <- sd(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$Age)), na.rm = TRUE)

# Total number and percentage of females
total_females <- sum(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$`Sex, Female`)), na.rm = TRUE)
percent_females <- (total_females / total_patients) * 100

# Total number and percentage of Black patients
total_black <- sum(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$Black)), na.rm = TRUE)
percent_black <- (total_black / total_patients) * 100

# Total number and percentage of Hispanic patients
total_hispanic <- sum(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$`Ethnicity, Hispanic`)), na.rm = TRUE)
percent_hispanic <- (total_hispanic / total_patients) * 100

# Total number of health systems and hospitals
total_health_systems <- length(unique(hospital_table1_summary$health_system))
total_hospitals <- length(unique(hospital_table1_summary$Hospital))

# Print the results
cat("Methods: The Common Longitudinal Intensive Care Unit (CLIF) consortium is comprised of", 
    total_health_systems, "US academic health systems that use a standardized data format to facilitate federated studies of critical illness. We identified all adult patients admitted [inclusion criteria] from [date range], excluding patients with [exclusion criteria].\n")

cat("Results: Of the", total_patients, "critically ill adults, the mean age was", round(mean_age, 1), "years (standard deviation", round(sd_age, 1), "years) and there were", 
    total_females, "(", round(percent_females, 1), "%) females,", total_black, "(", round(percent_black, 1), "%) black patients, and", 
    total_hispanic, "(", round(percent_hispanic, 1), "%) Hispanic patients across", total_health_systems, "healthcare systems and", 
    total_hospitals, "hospitals.")

```


# Abstract Sex/Height LTVV

## Introduction

Patient outcomes are determined by many factors other than their
critical illness.

These include processes of care and institutional factors.
[@kerlin_physician-level_2018; @Gaieski_2014_Therelationshipbetween]

Hospital variation in critical care outcomes
[@Merchant__2014__Hospitalvariationin; @Vigen2014;
@Kahn__2006__Hospitalvolumeand] and processes of care
[@Vranas__2020__TheAssociationof] exist, but the extent to which this
variation may affect research is less well known. We sought to explore
the underlying variation in severity of illness scores and their association with outcomes in
mechanically ventilated patients with acute respiratory failure.


## Methods

Methods: The Common Longitudinal Intensive Care Unit (CLIF) consortium is comprised of **`r total_health_systems`** US academic health systems that use a standardized data format to facilitate federated studies of critical illness. We identified all adult patients admitted [inclusion criteria] from [date range], excluding patients with [exclusion criteria].

Results: Of the **`r total_patients`** critically ill adults, the mean age was **`r round(mean_age, 1)`** years (standard deviation **`r round(sd_age, 1)`** years), and there were **`r total_females`** (**`r round(percent_females, 1)`%**) females, **`r total_black`** (**`r round(percent_black, 1)`%**) Black patients, and **`r total_hispanic`** (**`r round(percent_hispanic, 1)`%**) Hispanic patients across **`r total_health_systems`** healthcare systems and **`r total_hospitals`** hospitals. 




# Abstract Prediction Methodology

## Introduction

Patient outcomes are determined by many factors other than their
critical illness.

These include processes of care and institutional factors.
[@kerlin_physician-level_2018; @Gaieski_2014_Therelationshipbetween]

Hospital variation in critical care outcomes
[@Merchant__2014__Hospitalvariationin; @Vigen2014;
@Kahn__2006__Hospitalvolumeand] and processes of care
[@Vranas__2020__TheAssociationof] exist, but the extent to which this
variation may affect research is less well known. We sought to explore
the underlying variation in severity of illness scores and their association with outcomes in
mechanically ventilated patients with acute respiratory failure.


## Methods

Methods: The Common Longitudinal Intensive Care Unit (CLIF) consortium is comprised of **`r total_health_systems`** US academic health systems that use a standardized data format to facilitate federated studies of critical illness. We identified all adult patients admitted [inclusion criteria] from [date range], excluding patients with [exclusion criteria].

Results: Of the **`r total_patients`** critically ill adults, the mean age was **`r round(mean_age, 1)`** years (standard deviation **`r round(sd_age, 1)`** years), and there were **`r total_females`** (**`r round(percent_females, 1)`%**) females, **`r total_black`** (**`r round(percent_black, 1)`%**) Black patients, and **`r total_hispanic`** (**`r round(percent_hispanic, 1)`%**) Hispanic patients across **`r total_health_systems`** healthcare systems and **`r total_hospitals`** hospitals. 


