---
title: "Variation in Ventilation Abstract ATS 2024"
author: Nick Ingraham
date: today
execute: 
  echo: false
  output: false
  warning: false
format: 
  html: 
    embed-resources: true
    number-sections: true
    toc: true
    html-q-tags: true
    code-fold: true
bibliography: references.bib
csl: american-journal-of-respiratory-and-critical-care-medicine.csl
editor: source
editor_options: 
  chunk_output_type: console
---

# Setup

## Run r script to get functions and libraries

```{r}

## Loading in the beginning stuff
if(!exists("site_name")) {
  source("code/00_renv_restore.R")
}
 
```

## In Main Script... Run all above `IMPORT`

```{r}


# Ensure needed directories exist for outputs
output_dirs <- c(
  "aggregate_data/presentation_outputs",
  "aggregate_data/presentation_outputs/interaction_plots",
  "aggregate_data/presentation_outputs/variability_metrics",
  "aggregate_data/presentation_outputs/regression_results",
  "aggregate_data/presentation_outputs/descriptive_tables"
)

lapply(output_dirs, function(dir) {
  if (!dir.exists(dir)) dir.create(dir, recursive = TRUE)
})



# Step 1: List all CSV files in the directory
files <- list.files(path = "aggregate_data", pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)

# Step 2: Function to extract base name using double underscore
extract_base_name <- function(file_path) {
  file_name <- basename(file_path)
  # Remove .csv extension
  file_name_no_ext <- sub("\\.csv$", "", file_name)
  # Split by double underscore
  parts <- strsplit(file_name_no_ext, "__")[[1]]
  if (length(parts) < 2) {
    stop(paste("Filename does not contain double underscore '__':", file_name))
  }
  # The base name is the part before the double underscore
  base_name <- parts[1]
  return(base_name)
}

# Step 3: Get base names and group files
base_names <- sapply(files, extract_base_name)
files_df <- data.frame(file = files, base_name = base_names, stringsAsFactors = FALSE)
file_groups <- split(files_df$file, files_df$base_name)


# Step 4: Process `hospital_table1_summary` files separately
# Find files related to `hospital_table1_summary`
hospital_files <- file_groups[["hospital_table1_summary"]]

# Read and combine `hospital_table1_summary` files
hospital_data <- lapply(hospital_files, read.csv) |> bind_rows()


# Prepare hospital table summary with `system_hospital`
hospital_table1_summary <- hospital_data |> 
  mutate(health_system = sub("Hospital\\s+(.*?)\\s+\\d+", "\\1", Hospital)) |> 
    # Extract the hospital number from the Hospital column
  mutate(hospital_number = str_extract(Hospital, "\\d+")) |>  
  # Convert the extracted hospital_number to two digits
  mutate(Hospital_ID = sprintf("%02d", as.integer(hospital_number))) |> 
  # group_by(health_system, Hospital) |> 
  # mutate(Hospital_ID = sprintf("%02d", cur_group_id())) |>  # Zero-pad Hospital_ID
  # ungroup() |> 
  group_by(health_system) |> 
  mutate(Health_system_ID = sprintf("%02d", cur_group_id())) |>  # Zero-pad Health_system_ID
  ungroup() |> 
  mutate(system_hospital = paste("System", Health_system_ID, "Hosp", Hospital_ID),
         system = paste("System", Health_system_ID))

system_hospital <- hospital_table1_summary |> 
  select(hospital_id = Hospital, system_hospital, system, site = health_system) |> 
  distinct() |> 
  mutate(hospital_id = str_to_lower(hospital_id),
         site = str_to_lower(site))


# Remove `hospital_table1_summary` from `file_groups` so it’s not processed again
file_groups[["hospital_table1_summary"]] <- NULL


# Function to replace "hospital_id" fields with `system_hospital`
replace_hospital_id <- function(df) {
  # Identify columns that start with "hospital_id"
  hospital_id_cols <- grep("^hospital_id", names(df), value = TRUE)
  
  for (col in hospital_id_cols) {
    # Lowercase the hospital_id values in df for consistent joins
    df[[col]] <- str_to_lower(df[[col]])
    # Join to get `system_hospital` by original hospital_id values
    df <- df |> 
      left_join(system_hospital, by = setNames("hospital_id", col)) |> 
      # Replace original column with `system_hospital`
      mutate(!!col := system_hospital) |> 
      select(-system_hospital)
  }
  return(df)
}

# Step 4: Read, combine, and replace hospital_id in files for each group
data_list <- lapply(file_groups, function(file_paths) {
  data_frames <- lapply(file_paths, function(file_path) {
    df <- read.csv(file_path)
    # Apply the replace function to each dataframe
    df <- replace_hospital_id(df)
    return(df)
  })
  combined_data <- bind_rows(data_frames)
  return(combined_data)
})

# Step 5: Load each combined data into the global environment
list2env(data_list, envir = .GlobalEnv)


# This is the first 24 hours ventilation
ltvv_variation <- ltvv_variation_table |> 
  
  # mutate(hospital_id = str_to_lower(hospital_id)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id = system_hospital) |>
  
  uncount(n) |> 
    mutate(
    vt_bin = factor(vt_bin, levels = rev(c("< 4 cc/kg", "4-5 cc/kg",
                                           "5-6 cc/kg", "6-7 cc/kg",
                                           "7-8 cc/kg" , "8-9 cc/kg",
                                           "9-10 cc/kg", "10-11 cc/kg",
                                           "11-12 cc/kg", ">= 12 cc/kg")))
  ) 
  




icu_hosp_ranks_8cc <- ltvv_variation |> 
  group_by(hospital_id) |> 
  mutate(count_hosp = n()) |> 
  group_by(hospital_id, vt_bin, count_hosp) |> 
  summarise(count_bin = n()) |> 
  ungroup() |>
  mutate(htvv = fcase(
    vt_bin %in% c("8-9 cc/kg","9-10 cc/kg", "10-11 cc/kg", "11-12 cc/kg", ">= 12 cc/kg"), 1,
    default = 0)) |> 
  group_by(hospital_id) |> 
  mutate(pct_over_8 = sum(htvv*count_bin) / count_hosp) |> 
  dplyr::select(hospital_id, pct_over_8) |> 
  distinct() |>
  arrange(pct_over_8) |>  
  pull(hospital_id)

```

## Table 1

```{r}
#|output: true

hospital_table1_summary |> kable() 
```




## getting variables for abstract

```{r}


# Total number of critically ill adults
total_patients <- sum(hospital_table1_summary$N, na.rm = TRUE)

# Mean age and standard deviation
mean_age <- mean(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$Age)), na.rm = TRUE)
sd_age <- sd(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$Age)), na.rm = TRUE)

# Total number and percentage of females
total_females <- sum(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$`Sex..Female`)), na.rm = TRUE)
percent_females <- (total_females / total_patients) * 100

# Total number and percentage of Black patients
total_black <- sum(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$Black)), na.rm = TRUE)
percent_black <- (total_black / total_patients) * 100

# Total number and percentage of Hispanic patients
total_hispanic <- sum(as.numeric(gsub(" \\(.*\\)", "", hospital_table1_summary$`Ethnicity..Hispanic`)), na.rm = TRUE)
percent_hispanic <- (total_hispanic / total_patients) * 100

# Total number of health systems and hospitals
total_health_systems <- length(unique(hospital_table1_summary$health_system))
total_hospitals <- length(unique(hospital_table1_summary$Hospital))

start_date_chr <- "January 1st, 2018"
end_date_chr <- "December 31st, 2024"


# Print the results
cat("Methods: The Common Longitudinal Intensive Care Unit (CLIF) consortium is comprised of", 
    total_health_systems, "US academic health systems that use a standardized data format to facilitate federated studies of critical illness. We identified all adult patients admitted [inclusion criteria] from [date range], excluding patients with [exclusion criteria].\n")

cat("Results: Of the", total_patients, "critically ill adults, the mean age was", round(mean_age, 1), "years (standard deviation", round(sd_age, 1), "years) and there were", 
    total_females, "(", round(percent_females, 1), "%) females,", total_black, "(", round(percent_black, 1), "%) black patients, and", 
    total_hispanic, "(", round(percent_hispanic, 1), "%) Hispanic patients across", total_health_systems, "healthcare systems and", 
    total_hospitals, "hospitals.")

```

# Abstract Sex/Height LTVV

[Google Doc](https://docs.google.com/document/d/1T1-nFrZV6F-FomMsiBHxZldc3dtiIenXkcg9V4koNSA/edit?usp=sharing)

## Sex_category / LTVV graph

```{r}

ltvv_female <- ltvv_female_table |> 
  
  # mutate(hospital_id = str_to_lower(hospital_id)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id = system_hospital) |>
  # 
  uncount(n) 


icu_hosp_ranks_8cc_female <- ltvv_female |> 
  filter(sex_category == "female") |> 
  group_by(hospital_id) |> 
  mutate(count_hosp = n()) |> 
  group_by(hospital_id, vt_bin, count_hosp) |> 
  summarise(count_bin = n()) |> 
  ungroup() |>
 mutate(htvv = fcase(
    vt_bin %in% c("8-9 cc/kg","9-10 cc/kg", "10-11 cc/kg", "11-12 cc/kg", ">= 12 cc/kg"), 1,
    default = 0)) |> 
  group_by(hospital_id) |> 
  mutate(pct_over_8 = sum(htvv*count_bin) / count_hosp) |> 
  dplyr::select(hospital_id, pct_over_8) |> 
  distinct() |>
  arrange(pct_over_8) |>  
  pull(hospital_id)



###### Main Figure how Male vs Female by Category
summary_data_bar <- ltvv_female_table %>%
  filter(hospital_id %in% icu_hosp_ranks_8cc_female) |> 
  mutate(hospital_id = factor(hospital_id, levels = rev(icu_hosp_ranks_8cc_female))) |> 
  group_by(hospital_id, sex_category) %>%
  mutate(
    total_n = sum(n),
    proportion = n / total_n
  ) %>%
  ungroup() |> 
  mutate(
    vt_bin = factor(vt_bin, levels = rev(c("< 4 cc/kg", "4-5 cc/kg",
                                           "5-6 cc/kg", "6-7 cc/kg",
                                           "7-8 cc/kg" , "8-9 cc/kg",
                                           "9-10 cc/kg", "10-11 cc/kg",
                                           "11-12 cc/kg", ">= 12 cc/kg")))
  ) 

# Proportional bar chart
ltvv_sex_category_plot <- summary_data_bar |> 
ggplot(aes(x = proportion, y = hospital_id, fill = vt_bin)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ sex_category, 
    labeller = as_labeller(str_to_title)  # Capitalize facet labels
    ) +
  labs(
    title = "Proportion of Tidal Volume Categories by Hospital and Sex",
    x = "Tidal Volume per IBW (%)",
    y = "Hospital",
    fill = "Tidal Volume Category"
  ) +
  scale_fill_brewer(palette = "RdYlBu", direction = 1) +
  
  # scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  # Angle x-axis labels for better readability
    legend.title = element_text(size = 10, face = "bold"),
    plot.title = element_text(size = 16, face = "bold"),
    strip.text = element_text(size = 14, face = "bold.italic"),  # Make facet labels bold
    axis.title.x = element_text(size = 14, face = "bold", margin = margin(t = 10)),
    axis.title.y = element_text(size = 14, face = "bold"),
    axis.text.y = element_blank(),
    panel.grid.major.y = element_blank(),     # Remove major grid lines on x-axis
    panel.grid.minor.y = element_blank(),      # Remove minor grid lines on x-axis
    legend.position = "top",
    legend.direction = "horizontal"  # Set legend direction to horizontal
  ) +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE, reverse = TRUE))  # Make legend have one row

ltvv_sex_category_plot

# Save the plot as a high-resolution JPEG
ggsave("aggregate_data/ltvv_sex_category_plot.jpeg", plot = ltvv_sex_category_plot, 
       device = "jpeg", width = 10, height = 8, units = "in", dpi = 600)

# Calculate the number of females and the number with htvv = 1
rate_above_8cc_female  <- ltvv_female |> 
  filter(sex_category == "female") |> 
  mutate(htvv = fcase(
    vt_bin %in% c("8-9 cc/kg", "9-10 cc/kg", "10-11 cc/kg", "11-12 cc/kg", ">= 12 cc/kg"), 1,
    default = 0))

# Calculate the total number and number with htvv = 1
total_females_htvv <- nrow(rate_above_8cc_female)
count_htvv <- sum(rate_above_8cc_female$htvv)

# Use prop.test to calculate the rate and confidence intervals
htvv_rate <- prop.test(count_htvv, total_females_htvv)

# Extract rate and confidence interval
rate_htvv_female <- htvv_rate$estimate * 100
conf_interval_female <- htvv_rate$conf.int * 100
  
rate_above_8cc_male <- ltvv_female |> 
  filter(sex_category == "male") |> 
 mutate(htvv = fcase(
    vt_bin %in% c("8-9 cc/kg","9-10 cc/kg", "10-11 cc/kg", "11-12 cc/kg", ">= 12 cc/kg"), 1,
    default = 0)) 

# Calculate the total number and number with htvv = 1
total_males <- nrow(rate_above_8cc_male)
count_htvv <- sum(rate_above_8cc_male$htvv)

# Use prop.test to calculate the rate and confidence intervals
htvv_rate <- prop.test(count_htvv, total_males)

# Extract rate and confidence interval
rate_htvv_male <- htvv_rate$estimate * 100
conf_interval_male <- htvv_rate$conf.int * 100


  



```


## Sex_category point estimates

```{r}
# Get all objects in the environment that start with "model_coefs_sex"
model_objects <- mget(ls(pattern = "^model_coefs_sex"))

# Combine all objects into one dataset
combined_model_coefs_sex <- bind_rows(model_objects, .id = "source")

model_names <- c(
  "Male ~ HTVV (Binary)"                = "M_HTVV",
  "Male ~ Vt"                           = "M_Vt",
  "Male + Height ~ HTVV (Binary)"       = "M_H_HTVV",
  "Male + Height ~ Vt"                  = "M_H_Vt",
  "Male * Height ~ HTVV (Binary)"       = "M_Hx_HTVV",
  "Male * Height ~ Vt"                  = "M_Hx_Vt",
  "Male * rcs(Height) ~ HTVV (Binary)"  = "M_rcsHx_HTVV",
  "Male * rcs(Height) ~ Vt"             = "M_rcsHx_Vt"
)

# View the combined dataset
combined_model_coefs_sex_clean <- combined_model_coefs_sex |> 
    mutate(significant = ifelse(PValue < 0.05, "Yes", "No")) |> 
    mutate(group = fifelse(str_detect(StudyID, "bin"), "Vt > 8cc/kg (OR)", "Vt cc/kg (Coef)"),
         Estimate = ifelse(str_detect(StudyID, "bin"), exp(Estimate), Estimate),
         LowerCI = ifelse(str_detect(StudyID, "bin"), exp(LowerCI), LowerCI),
         UpperCI = ifelse(str_detect(StudyID, "bin"), exp(UpperCI), UpperCI)) |> 
  mutate(
    Model_Simple = factor(Model, levels = c(
      "Male ~ HTVV (Binary)",
      "Male + Height ~ HTVV (Binary)",
      "Male * Height ~ HTVV (Binary)",
      "Male * rcs(Height) ~ HTVV (Binary)",
      "Male ~ Vt",
      "Male + Height ~ Vt",
      "Male * Height ~ Vt",
      "Male * rcs(Height) ~ Vt"
    ),
                          labels = c(
                            "m_htvv", 
                            "m_h_htvv", 
                            "m_hx_htvv", 
                            "m_rcs_hx_htvv", 
                            "m_vt", 
                            "m_h_vt",
                            "m_hx_vt", 
                            "m_rcs_hx_vt"
                          ), ordered = TRUE))

model_order <- c(
  "Male ~ HTVV (Binary)",
  "Male + Height ~ HTVV (Binary)",
  "Male * Height ~ HTVV (Binary)",
  "Male ~ Vt",
  "Male + Height ~ Vt",
  "Male * Height ~ Vt"
)
#Assuming your combined dataset `combined_model_coefs_sex` has columns:
# "StudyID" for different models, "Site" for different sites, "Estimate", "LowerCI", and "UpperCI".

# # set a threshold for max absolute value of confidence interval
threshold <- 10  # adjust as appropriate for your context


combined_model_coefs_sex_plot <-  combined_model_coefs_sex_clean |>
  filter(Site != "EU") |> 
  mutate(Site = str_to_lower(Site)) |> 
  left_join(system_hospital |> select(system, site) |> distinct(),
            by = join_by(Site == site)) |> 
  filter(!str_detect(Model, "rcs"))  |> 
  filter(abs(LowerCI) < threshold & abs(UpperCI) < threshold) |> 
  filter(Model %in% c(
  "Male ~ HTVV (Binary)",
  "Male + Height ~ HTVV (Binary)",
  # "Male * Height ~ HTVV (Binary)",
  "Male ~ Vt",
  "Male + Height ~ Vt",
  # "Male * Height ~ Vt",
  ""
)) |> 
  
  filter(Variable == "sex_categoryfemale") |>
  ggplot(aes(x = Estimate, y = system, color = Model, shape = significant)) +
  geom_point(position = position_dodge(width = 0.6), size = 4) +  # Plot the point estimates
  geom_errorbarh(aes(xmin = LowerCI, xmax = UpperCI), 
                 position = position_dodge(width = 0.6), height = 0.25, size = 0.8) +  # Error bars with smaller height and thicker line
  facet_grid(~group, scales = "free_x") +
  
  
  # Add reference line at OR=1 ONLY for OR facet
  geom_vline(data = tibble(group = "Vt > 8cc/kg (OR)", vline = 1),
             aes(xintercept = vline),
             linetype = "dashed", linewidth = 0.7, color = "gray50") +
  # Add reference line at Coef=0 ONLY for Coef facet
  geom_vline(data = tibble(group = "Vt cc/kg (Coef)", vline = 0),
             aes(xintercept = vline),
             linetype = "dashed", linewidth = 0.7, color = "gray50") +
  
  labs(x = "Estimate for Female", y = "Site", color = "Model (StudyID)") +
  theme_bw(12) +
  theme(
    axis.text.y = element_text(size = 12),
    axis.title.x = element_text(size = 12),
    strip.text = element_text(size = 14, face = "bold"),  # Customize facet titles
    legend.position = "right",  # Move legend to the right for clarity
    panel.grid.major.y = element_blank()  # Remove major y grid lines for a cleaner look
  ) +
  scale_colour_brewer(palette = "RdBu", direction = 1, breaks = model_order)
  # scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd"))  # Customize colors if needed

combined_model_coefs_sex_plot

ggsave("aggregate_data/presentation_outputs/interaction_plots/sex_height_interaction_by_system.png", combined_model_coefs_sex_plot, width = 8, height = 6)


# Getting Female estimates
female_estimates <- combined_model_coefs_sex_clean |> 
filter(Variable == "sex_categoryfemale") |> 
filter(Site != "EU") |> 
  summarise(mean_female_estimate = mean(Estimate, na.rm = TRUE),
    min_female_estimate = min(Estimate, na.rm = TRUE),
    max_female_estimate = max(Estimate, na.rm = TRUE),
         .by = Model_Simple) 


female_estimates

significant_m_vt <- combined_model_coefs_sex_clean |> 
  filter(Variable == "sex_categoryfemale") |> 
  filter(Site != "EU") |> 
  filter(Model_Simple == "m_vt") |> 
  filter(significant == "Yes") |> 
  nrow() 

significant_m_h_vt <- combined_model_coefs_sex_clean |> 
  filter(Variable == "sex_categoryfemale") |> 
  filter(Site != "EU") |> 
  filter(Model_Simple == "m_h_vt") |> 
  filter(significant == "Yes") |> 
  nrow() 


#mediation analysis
coef_m_vt <- combined_model_coefs_sex_clean |> 
  filter(Variable == "sex_categoryfemale") |> 
  filter(Site != "EU") |> 
  filter(Model_Simple == "m_vt") |> 
  select(est_m_vt = Estimate, Site)

coef_m_h_vt <- combined_model_coefs_sex_clean |> 
  filter(Variable == "sex_categoryfemale") |> 
  filter(Site != "EU") |> 
  filter(Model_Simple == "m_h_vt") |>  
  select(est_m_h_vt = Estimate, Site)

mediation_vt <- coef_m_h_vt |> left_join(coef_m_vt) |> 
  mutate(difference = est_m_vt - est_m_h_vt) |> 
  mutate(mediation = difference / est_m_vt)

mediation_vt_min <- min(mediation_vt$mediation)
mediation_vt_max <- mediation_vt |> filter(mediation <1) |> pull() |> max()
```

## Sex_category / Height Models

```{r}

# Create height quantiles
height_breaks <- c(54, 60, 63, 66, 69, 72, 80)  # Corresponds to < 5 feet, 5-5’3”, 5’3”-5’6”, ..., >6’3”
height_labels <- c("< 5 feet", "5-5’3”", "5’3”-5’6”", "5’6”-5’9”", "5’9”-6’0”", "> 6’3”")



model_preds_sex_category_height_ltvv <-  model_preds_sex_category_height_ltvv |> 
  mutate(Model = factor(Model)) |> 
  mutate(sex_category = group) |> 
  mutate(height_inches = x) |> 
    filter(!str_detect(Model, "rcs")) |> 
  filter(height_inches < 80) |> 
  filter(height_inches > 54) |>   
  mutate(
    Model_Simple = factor(Model, levels = c(
      "Male ~ HTVV (Binary)",
      "Male ~ Vt",
      "Male + Height ~ HTVV (Binary)",
      "Male + Height ~ Vt",
      "Male * Height ~ HTVV (Binary)",
      "Male * Height ~ Vt",
      "Male * rcs(Height) ~ HTVV (Binary)",
      "Male * rcs(Height) ~ Vt"
    ),
                          labels = c(
                            "m_htvv", "m_vt", 
                            "m_h_htvv", "m_h_vt",
                            "m_hx_htvv", "m_hx_vt", 
                            "m_rcs_hx_htvv", "m_rcs_hx_vt"
                          )))


min_height <- round(min(model_preds_sex_category_height_ltvv$height_inches, na.rm = TRUE))
max_height <- round(max(model_preds_sex_category_height_ltvv$height_inches, na.rm = TRUE))


# Ensure Model is a factor
all_predictions_continuous <- model_preds_sex_category_height_ltvv |> 
  filter(!str_detect(Model, "Binary"))

# For continuous models
continuous_model_order <- c(
  "Male ~ Vt",
  "Male + Height ~ Vt",
  "Male * Height ~ Vt"
)


# Plot all models together
all_predictions_continuous_plot <- all_predictions_continuous |> 
    mutate(
    Model = factor(Model, levels = continuous_model_order),
    sex_category = str_to_title(sex_category)
  ) |> 
    mutate(sex_category = str_to_title(sex_category)) |> 
  ggplot(aes(x = height_inches, y = predicted, color = sex_category, group = interaction(health_system, sex_category))) +
  geom_line(size = 1) +
    geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = sex_category), alpha = 0.2, color = NA) +

  # facet_wrap(~ Model) +
    facet_grid(health_system ~ Model, scales = "free_y") +
  labs(
    title = "Predicted VT per kg PBW by Height and Sex Category",
    x = "Height (inches)",
    y = "Predicted VT per kg PBW",
    color = "Sex Category",
    fill = "Sex Category"
  ) +
    scale_x_continuous(
    limits = c(min_height, max_height),
    breaks = seq(min_height, max_height, by = 3),
    minor_breaks = NULL  # Remove minor grid lines if desired
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(size = 14, face = "bold"),
    strip.text = element_text(size = 12, face = "bold")
  )

all_predictions_continuous_plot
ggsave("aggregate_data/presentation_outputs/interaction_plots/continuous_sex_height_interaction.png",
       all_predictions_continuous_plot, width = 12, height = 9)

# Ensure Model is a factor
all_predictions_binary <- model_preds_sex_category_height_ltvv |> 
  filter(str_detect(Model, "Binary"))




# For binary models
binary_model_order <- c(
  "Male ~ HTVV (Binary)",
  "Male + Height ~ HTVV (Binary)",
  "Male * Height ~ HTVV (Binary)"
)

# Plot all models together
all_predictions_binary_plot <- all_predictions_binary |> 
    mutate(
    Model = factor(Model, levels = binary_model_order),
    sex_category = str_to_title(sex_category)
  ) |> 
    mutate(sex_category = str_to_title(sex_category)) |> 
  ggplot(aes(x = height_inches, y = predicted, color = sex_category, group = interaction(health_system, sex_category))) +
  geom_line(size = 1) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = sex_category), alpha = 0.2, color = NA) +
  facet_grid(health_system ~ Model,  scales = "free_y") +
  labs(
    title = "Predicted VT per kg IBW by Height and Sex Category",
    x = "Height (inches)",
    y = "Predicted VT per kg IBW",
    color = "Sex Category",
    fill = "Sex Category"
  ) +
    scale_x_continuous(
    limits = c(min_height, max_height),
    breaks = seq(min_height, max_height, by = 3),
    minor_breaks = NULL  # Remove minor grid lines if desired
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(size = 14, face = "bold"),
    strip.text = element_text(size = 12, face = "bold")
  )

all_predictions_binary_plot
ggsave("aggregate_data/presentation_outputs/interaction_plots/binary_sex_height_interaction.png",
       all_predictions_binary_plot, width = 12, height = 9)



#### getting across system predictions
sex_cat_hours_hospital <- ltvv_female |> 
  group_by(sex_category, health_system) |> 
  summarise(sex_hosp_count_hours = n())


weighted_means <- model_preds_sex_category_height_ltvv |> 
  filter(Model_Simple == "m_vt") |> 
  select(predicted, health_system, sex_category) |> distinct() |> 
  left_join(sex_cat_hours_hospital) |> 
    group_by(sex_category) %>%
  summarise(weighted_tidal_volume = weighted.mean(predicted, sex_hosp_count_hours))

# Calculate the absolute difference
abs_difference <- abs(diff(weighted_means$weighted_tidal_volume))

weighted_means_f <- weighted_means |> filter(sex_category == "female") |> pull(weighted_tidal_volume)
weighted_means_m <- weighted_means |> filter(sex_category == "male") |> pull(weighted_tidal_volume)
# Display results
weighted_means
abs_difference


# Weighted means summary table
weighted_means_summary <- weighted_means |> 
  pivot_wider(names_from = sex_category, values_from = weighted_tidal_volume) |> 
  mutate(abs_difference = abs(male - female))


weighted_means_summary |> 
  gt() |> 
  tab_header(
    title = "Weighted Average Tidal Volumes by Sex",
    subtitle = "Across All Health Systems"
  ) |> 
  cols_label(
    female = "Female (cc/kg IBW)",
    male = "Male (cc/kg IBW)",
    abs_difference = "Absolute Difference"
  ) |> 
  fmt_number(columns = everything(), decimals = 3) |> 
  tab_options(
    heading.background.color = "#eaf2f8",
    table.font.size = 14
  ) |> 
  gtsave("aggregate_data/presentation_outputs/descriptive_tables/weighted_means_summary.html")

```


## Abstract Writing
**Sex and Height-Based Variation in Ventilator Tidal Volume Settings**
Nicholas E. Ingraham, Casey Eddington, Benjamin Schmid, Alex Ortiz, Gary Weissman, William Parker, Kaveri Chhikara




**Introduction**  
Low tidal volume ventilation (LTVV) reduces mortality in mechanically ventilated patients with severe hypoxic respiratory failure.[@network2000brower]  LTVV also benefits populations not originally included in the landmark trail. [@SerpaNeto__2012__Associationbetweenuse] Despite this, adherence to delivering LTVV varies in clinical practice. [@Gao__2021__LungProtectiveVentilationOver]  In this study we sought to explore potential mechanisms underlying LTVV adherence, specifically patient sex and their height. 

**Methods**  
The Common Longitudinal Intensive Care Unit (CLIF) consortium is comprised of **`r total_health_systems`** US academic health systems that use a standardized data format to facilitate federated studies of critical illness. We identified all adult patients admitted to the ICU and required at least 24 hours of mechanical ventilation from **`r start_date_chr`** to **`r end_date_chr`** , excluding patients with tracheostomy within 72 hours of admission.

**Results**  
Of the **`r total_patients`** critically ill adults, the mean age was **`r round(mean_age, 1)`** years (standard deviation **`r round(sd_age, 1)`** years), and there were **`r format(total_females, scientific = FALSE)`** (**`r round(percent_females, 1)`%**) females, **`r format(total_black, scientific = FALSE)`** (**`r round(percent_black, 1)`%**) Black patients, and **`r total_hispanic`** (**`r round(percent_hispanic, 1)`%**) Hispanic patients across **`r total_health_systems`** healthcare systems and
**`r total_hospitals`** hospitals. **Figure 1** shows the distribution of LTVV statified by patient sex. The mean rate of LTVV in females across all patients was **`r round(100 - rate_htvv_female, 1)`% (`r round(100 - conf_interval_female[2], 1)`** - **`r round(100 - conf_interval_female[1], 1)`)** while the rate for males was **`r round(100 - rate_htvv_male, 1)`% (`r round(100 - conf_interval_male[2], 1)`** - **`r round(100 - conf_interval_male[1], 1)`)**. 
Using the baseline models, females were predicted to have a tidal volume **`r abs_difference`** cc/kg IBW higher than males (**`r weighted_means_f`**  vs. **`r weighted_means_m`** )
Estimates were significant for male (vs. female) in **`r significant_m_vt`** hospitals and ranged from **`r round(male_estimates |> filter(Model_Simple == "m_vt") |> select(min_male_estimate), 1)`** to **`r round(male_estimates |> filter(Model_Simple == "m_vt") |> select(max_male_estimate), 1)`**, but when corrected for height the estimates were significant in **`r significant_m_h_vt`** hospitals and ranged from **`r round(male_estimates |> filter(Model_Simple == "m_h_vt") |> select(min_male_estimate), 1)`** to **`r round(male_estimates |> filter(Model_Simple == "m_h_vt") |> select(max_male_estimate), 1)`**.


mediation analsyis resulted in **`r round(mediation_vt_min, 1)*100`%** to **`r round(mediation_vt_max*100, 1)`**

**Conclusion** 
XYZ

After adjustment for important confounders, female patients received Vts that were an average of **`r abs_difference`** cc/kg IBW higher than male patients

```{r}
#| output: true

ltvv_sex_category_plot


```


```{r}
#| output: true

all_predictions_continuous_plot


```

```{r}
#| output: true

all_predictions_binary_plot


```



```{r}
#| output: true

combined_model_coefs_sex_plot


```







# Abstract Mode Variation


## Mode Graph

```{r}

# already rolled up... no need to change
mode_hospital_summary_table <- mode_hospital_summary_table |> 
  # mutate(hospital_id = str_to_lower(hospital_id)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id = system_hospital) |>
    # Normalizing counts AGAIN with all hospitals now in the data
  mutate(normalized_count = count / fmax(count, na.rm = TRUE),
         # need to have NA in the data given its in the universal aesthetic
         mode_category = NA)  |> 
  arrange(-count) 

mode_hosp_order <- mode_hospital_summary_table |> select(hospital_id) |> pull()

mode_hosp_order2 <- mode_hourly_resp_support_table |> 
  mutate(total_mode_hours = sum(n, na.rm = TRUE),
         .by = hospital_id_graph) |> 
  filter(mode_category == "assist control-volume control") |> 
  mutate(percent = n/total_mode_hours) |> 
  distinct() |> 
  arrange(percent) |> 
  select(hospital_id_graph) |>  pull()


# uncount
mode_hourly_resp_support <- mode_hourly_resp_support_table |> 
  # mutate(hospital_id = str_to_lower(hospital_id_graph)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id_graph = system_hospital) |> 
  mutate(hospital_id_graph = factor(hospital_id_graph, levels = 
                                      # mode_hosp_order    #order by total mode hours
                                      mode_hosp_order2    #order by acvc
                                    )) |> 
    mutate(mode_category = fcase(
              mode_category == "assist control-volume control",      "assist control-volume control", 
              mode_category == "pressure support/cpap",              "pressure support/cpap", 
              mode_category == "pressure-regulated volume control",  "pressure-regulated volume control",
              mode_category == "pressure control",                   "pressure control", 
              mode_category == "simv",                               "simv", 
              mode_category == "blow by",                            "other",
              mode_category == "other",                              "other",
              mode_category == "aprv",                               "other",
              default = "other"
  )) |> 
  mutate(mode_category = str_to_title(mode_category)) |> 
  mutate(mode_category = factor(mode_category, levels = c(
    "Assist Control-Volume Control",
    "Pressure Support/Cpap",
    "Pressure-Regulated Volume Control",
    "Pressure Control",
    "Simv",
    "Other", ordered = TRUE))) |> 
  uncount(n) |> 
  mutate(hospital_id = hospital_id_graph) |> 
  arrange(mode_category) 



plot_mode_hourly_resp_support <- 
  ggplot(
  mode_hourly_resp_support,  aes(x = hospital_id_graph, fill = mode_category)) +
  geom_bar(position = "fill") +
  # Use labs to add a title and remove the axis labels
  labs(title = "Ventilator Modes by Hospital in the first 24 hours", x = "Hospital", y = "Proportion of Mode Category") + 
  # Use theme_minimal to create a minimal theme
  theme_minimal() +
  # adjusting tick marks for x axis
  # theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  # Add the summary data as a layer with a dummy aesthetic for color
  # geom_point(data = mode_hospital_summary_table, aes(x = hospital_id, y = normalized_count, color = "Total Counts"), size = 3.5) +
  # # Add horizontal lines at the height of each point, only spanning the width of the bar
  # geom_errorbar(data = mode_hospital_summary_table, aes(x = hospital_id, ymin = normalized_count, ymax = normalized_count, group = 1, color = "Total Counts"),
  #               width = 0.9,  # Adjust this value to change the width of the horizontal lines
  #               linewidth = 0.9) +  # Adjust size for line thickness
  # geom_line(data = mode_hospital_summary_table, aes(x = hospital_id_graph, y = normalized_count, group = 1, color = "Total Counts"), linewidth = 1) +
  # Customize the legend for the dummy aesthetic
  # scale_color_manual(name = "Legend", 
  #                    values = c("Total Counts" = "black"),
  #                    labels = c("Total Counts" = "Total Mode Counts (Normalized)")) +
  # 
  guides(
    # color = guide_legend(title = "", order = 1),
    fill = guide_legend(title = "Mode Category", override.aes = list(color = NA), order = 2)
) +
  
  scale_fill_brewer(palette = "Accent",
                    breaks = 
                        c("Assist Control-Volume Control",
                          "Pressure Support/Cpap",
                          "Pressure-Regulated Volume Control",
                          "Pressure Control",
                          "Simv",
                          "Other")) +

  # scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
  theme_minimal() +
  theme(
    # axis.text.x = element_text(size = 8, angle = 45, hjust = 1),  # Angle x-axis labels for better readability
    axis.text.x = element_blank(),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold", margin = margin(r = 10)),  # Add space to the right of y-axis title
    axis.text.y = element_text(size = 8, face = "bold"),  
    plot.title = element_text(size = 16, face = "bold"),
    legend.title = element_text(size = 14, face = "bold"),
    axis.ticks.x = element_blank(),
    panel.grid.major.x = element_blank(),     # Remove major grid lines on x-axis
    panel.grid.minor.x = element_blank(),      # Remove minor grid lines on x-axis
    strip.text = element_text(size = 12, face = "bold")  # Make facet labels bold
)

plot_mode_hourly_resp_support
ggsave("aggregate_data/plot_mode_hourly_resp_support.jpeg", plot = plot_mode_hourly_resp_support, 
       device = "jpeg", width = 10, height = 9, units = "in", dpi = 600)


# Total mode hours
total_mode_hours <- mode_hospital_summary_table |> 
  summarise( total_mode_hours = sum(count)) |> pull()


# Step 1: Rate of each setting across the entire dataframe
# Calculate the rate of each mode_category
rate_by_setting <- mode_hourly_resp_support |> 
  count(mode_category) |> 
  mutate(rate = n / sum(n))
# Create individual objects for each mode category rate (useful for markdown)
rate_vc <- rate_by_setting |> filter(mode_category == "Assist Control-Volume Control") |> pull(rate) * 100
rate_ps <- rate_by_setting |> filter(mode_category == "Pressure Support/Cpap") |> pull(rate)  * 100
rate_prvc <- rate_by_setting |> filter(mode_category == "Pressure-Regulated Volume Control") |> pull(rate)  * 100
rate_pc <- rate_by_setting |> filter(mode_category == "Pressure Control") |> pull(rate)  * 100
rate_simv <- rate_by_setting |> filter(mode_category == "Simv") |> pull(rate)  * 100
rate_other <- rate_by_setting |> filter(mode_category == "Other") |> pull(rate)  * 100

# Step 2: Highest and lowest rate of "Assist Control-Volume Control" by hospital
rate_table <- mode_hourly_resp_support |> 
  group_by(hospital_id) |> 
  mutate(hosp_hour_count = n()) |> ungroup() |> select(mode_category, hospital_id, hosp_hour_count) 

vc_hours <- rate_table |> 
  filter(mode_category == "Assist Control-Volume Control") |> 
  nrow()

vc_rates <- rate_table |> 
  filter(mode_category == "Assist Control-Volume Control") |> 
  group_by(hospital_id) |> 
  mutate(rate = (n() / hosp_hour_count)*100) |> 
  ungroup() |> 
  select(rate, hospital_id) |> distinct() 

highest_vc <- vc_rates |> slice_max(rate, n = 1)
lowest_vc <- vc_rates |> slice_min(rate, n = 1)

# Step 3: Highest and lowest rate of "Pressure Control" by hospital
pc_hours <- rate_table |> 
  filter(mode_category == "Pressure Control") |> 
  nrow()

 

pc_rates <- rate_table |> 
  filter(mode_category == "Pressure Control") |> 
  group_by(hospital_id) |> 
  mutate(rate = (n() / hosp_hour_count)*100) |> 
  ungroup() |> 
  select(rate, hospital_id) |> distinct() 

highest_pc <- pc_rates |> slice_max(rate, n = 1)
lowest_pc <- pc_rates |> slice_min(rate, n = 1)

# Step 4: Highest and lowest rate of "Pressure-Regulated Volume Control" by hospital

prvc_hours <- rate_table |> 
  filter(mode_category == "Pressure-Regulated Volume Control") |> 
  nrow()

prvc_rates <- rate_table |> 
  filter(mode_category == "Pressure-Regulated Volume Control") |> 
  group_by(hospital_id) |> 
  mutate(rate = (n() / hosp_hour_count)*100) |> 
  ungroup() |> 
  select(rate, hospital_id) |> distinct() 

highest_prvc <- prvc_rates |> slice_max(rate, n = 1)
lowest_prvc <- prvc_rates |> slice_min(rate, n = 1)


simv_hours <- rate_table |> 
  filter(mode_category == "Simv") |> 
  nrow()

# Step 4: Highest and lowest rate of "Pressure-Regulated Volume Control" by hospital
simv_rates <- rate_table |> 
  filter(mode_category == "Simv") |> 
  group_by(hospital_id) |> 
  mutate(rate = (n() / hosp_hour_count)*100) |> 
  ungroup() |> 
  select(rate, hospital_id) |> distinct() 

highest_simv <- simv_rates |> slice_max(rate, n = 1)
lowest_simv <- simv_rates |> slice_min(rate, n = 1)


```

## LTVV graph
```{r}
# This is the first 24 hours ventilation
ltvv_variation <- ltvv_variation_table |> 
  
  # mutate(hospital_id = str_to_lower(hospital_id)) |> 
  # left_join(system_hospital) |> 
  # mutate(hospital_id = system_hospital) |>
  
  uncount(n) |> 
    mutate(
    vt_bin = factor(vt_bin, levels = rev(c("< 4 cc/kg", "4-5 cc/kg",
                                           "5-6 cc/kg", "6-7 cc/kg",
                                           "7-8 cc/kg" , "8-9 cc/kg",
                                           "9-10 cc/kg", "10-11 cc/kg",
                                           "11-12 cc/kg", ">= 12 cc/kg")))
  ) 
  


icu_hosp_ranks_8cc <- ltvv_variation |> 
  group_by(hospital_id) |> 
  mutate(count_hosp = n()) |> 
  group_by(hospital_id, vt_bin, count_hosp) |> 
  summarise(count_bin = n()) |> 
  ungroup() |>
  mutate(htvv = fcase(
    vt_bin %in% c("8-9 cc/kg","9-10 cc/kg", "10-11 cc/kg", "11-12 cc/kg", ">= 12 cc/kg"), 1,
    default = 0)) |> 
  group_by(hospital_id) |> 
  mutate(pct_over_8 = sum(htvv*count_bin) / count_hosp) |> 
  dplyr::select(hospital_id, pct_over_8) |> 
  distinct() |>
  arrange(pct_over_8) |>  
  pull(hospital_id)



ltvv_variation_plot <- ltvv_variation |> 
  filter(hospital_id %in% icu_hosp_ranks_8cc) |> 
  mutate(hospital_id = factor(hospital_id, levels = rev(icu_hosp_ranks_8cc))) |> 
  ggplot(aes(y = hospital_id, fill = vt_bin )) + 
  geom_bar(position = "fill") + 
  scale_fill_brewer(palette = "RdYlBu", direction = 1) +
  ggthemes::theme_gdocs() + 
  labs(x = "Percentage of patient-hours of volume control ventilation",
       y = "Hospital",
       fill = "")



```

## Abstract Writing
**Critical Care Respiratory Support Data Wrangling and Mode Variation**

[Google Doc](https://docs.google.com/document/d/1kyPNfOT2v0zwF-xFmcmWp_nzY2vyxgGyFlGVR90R0iU/edit?usp=sharing)


**Introduction**  
Healthcare outcomes vary across institutions in critically ill patients. Practice variation is difficult to capture on a large scale without utilizing the electronic healthcare records. A specific obstacle includes dealing with raw ventilator data. We sought to develop systemic methodology to accurately capture the time course of mechanical ventilation for a patient. Furthermore, we aimed to make this process generalizable across healthcare systems by using the Common Longitudinal ICU Format (CLIF). In addition to developing syntax that outputs an hourly-patient-level dataframe with pertinent ventilator data, we used variation in mode ventilation as a use-case to explore differences in mode selection across U.S. health systems.

**Methods**  
The Common Longitudinal Intensive Care Unit (CLIF) consortium
is comprised of **`r total_health_systems`** US academic health systems
that use a standardized data format to facilitate federated studies of
critical illness. We identified all adult patients admitted to the ICU and required at least 24 hours of mechanical ventilation from **`r start_date_chr`** to **`r end_date_chr`** , excluding patients with tracheostomy within 72 hours of admission.

**Results**  
Of the **`r total_patients`** critically ill adults who recieved a total of **`r total_mode_hours`** hours of mechanical ventilation, the mean age was **`r round(mean_age, 1)`** years (standard deviation **`r round(sd_age, 1)`** years), and there were **`r format(total_females, scientific = FALSE)`** (**`r round(percent_females, 1)`%**) females, **`r format(total_black, scientific = FALSE)`** (**`r round(percent_black, 1)`%**) Black patients, and **`r total_hispanic`** (**`r round(percent_hispanic, 1)`%**) Hispanic patients across **`r total_health_systems`** healthcare systems and **`r total_hospitals`** hospitals. Using device and mode flowsheet names from the EHR that were linked to the CLIF common data elements, we executed the "CLIF Respiratory Support Waterfall" across all our sites. The algorithm leverages the most specific data from the EHR (oxygen devices) to identify transitions in the patients respiratory status. It then takes a stepwise approach by looking within the prior hierarchy to find other transitions (e.g. modes). This approach formulates a final respiratory support ID for each device/mode segment and is leveraged to fill in missing data. The resultant data includes an hourly level of patient information. The most common modes used across all health systems included **`r format(vc_hours, scientific = FALSE)`** of volume control (**`r round(rate_vc, 1)`%**), **`r format(pc_hours, scientific = FALSE)`** of pressure control (**`r round(rate_pc, 1)`%**), and **`r format(prvc_hours, scientific = FALSE)`** of pressure-regulated volume control (**`r round(rate_prvc, 1)`%**). Hospitals varied on the use of different mode settings with the highest hospital rate of volume control was **`r round(highest_vc$rate, 1)`%** and the lowest was **`r round(lowest_vc$rate, 1)`%**. Less common forms of ventilation, such as SIMV, varied from **`r round(lowest_simv$rate, 1)`%** to **`r round(highest_simv$rate, 1)`%**.

**Conclusion**  
Granular data from critically ill patients can be complex and rittled with missingness and erroneous data. By leveraging the CLIF platform, we developed a cross-institutional mechanism to extract and formulate hourly patient data that is critical to ICU research. The usefulness is demonstrated through our exploration of mode variation across **`r total_hospitals`** hospitals.


```{r}
#| output: true

plot_mode_hourly_resp_support
```



# Abstract Prediction Methodology


## Landmark analysis

```{r}
# Get all objects in the environment that start with "model_coefs_sex"
model_objects <- mget(ls(pattern = "^ALL_model_coefs_landmark_mortality"))

# Combine all objects into one dataset
landmark_files_mort <- bind_rows(model_objects, .id = "source")

# Filter for just htvv_cumulative rows from the combined mortality results
mort_htvv <- landmark_files_mort %>%
  filter(term == "htvv_cumulative") |> 
  filter(landmark_day != 28)


ggplot(mort_htvv, aes(x = as.numeric(landmark_day), y = estimate, color = source)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.3) +
  scale_y_log10() +  # because ORs are multiplicative
  labs(
    title = "Odds Ratio of Mortality vs Cumulative HTVV by Landmark Day",
    x = "Landmark Day",
    y = "Odds Ratio (log scale)",
    color = "Site"
  ) +
  theme_minimal()

# Get all objects in the environment that start with "model_coefs_sex"
model_objects <- mget(ls(pattern = "^ALL_model_coefs_landmark_vfds"))

# Combine all objects into one dataset
landmark_files_vfds <- bind_rows(model_objects, .id = "source")


vfd_htvv <- landmark_files_vfds %>%
  filter(term == "htvv_cumulative")

ggplot(vfd_htvv, aes(x = as.numeric(landmark_day), y = estimate, color = source)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.3) +
  labs(
    title = "Effect of Cumulative HTVV on VFDs by Landmark Day",
    x = "Landmark Day",
    y = "Coefficient (Days)",
    color = "Site"
  ) +
  theme_minimal()

```




## Daily Mortality Models

**htvv_daily_percent** = $(set~volume~hours > 8cc/ibw) / (ventilator~hours~that~day)$

Testing: `laps2`, `pf_ratio`, `sf_ratio`, `oxygenation_index` (if
available)

**Oxygenation Index** = $(mean~airway~pressure * Fio_2~set) /Po_2~arterial)$

-   fio2 and pa02 and mean_airway_pressure need to be within 1 hour of
    each other

`"mortality_enc ~ VAR_first_24hr + daily_VAR + age_at_admission + sex_category + day + htvv_daily_percent + hospital_id"`
`"VFDs ~ VAR_first_24hr + daily_**VAR** + age_at_admission + sex_category + day + htvv_daily_percent + hospital_id"`

```{r}
# Get all objects in the environment that start with "model_coefs_sex"
model_objects <- mget(ls(pattern = "^model_coefs_daily"))

# Combine all objects into one dataset
combined_model_coefs_daily_mort <- bind_rows(model_objects, .id = "source")

# View the combined dataset
combined_model_coefs_daily_mort



# Ensure that 'term', 'variable', and 'site' are factors for plotting purposes
model_coefficients_mort <- combined_model_coefs_daily_mort %>%
  mutate(
    term = as.factor(term),
    variable = as.factor(variable),
    site = as.factor(site)
  ) %>%
  mutate(significant = ifelse(p.value < 0.05, "Yes", "No")) |> 
  filter(str_detect(term, "^daily_")) |> 
  filter(term != "(Intercept)")  # Exclude intercept term

# Create forest plots

model_coefficients_mort_plot <- model_coefficients_mort |> 
ggplot(aes(x = term, y = estimate, ymin = conf.low, ymax = conf.high, color = variable, shape = significant)) +
  geom_pointrange(position = position_dodge(width = 0.6)) +
  facet_wrap(~ site, scales = "free_y") +
  # scale_y_log10() +
  coord_flip() +
  labs(
    title = "Comparison of Variables Across Sites on In-hospital Mortality",
    x = "Predictor Variable",
    y = "Odds Ratio (log scale)",
    color = "Variable"
  ) +
  theme_bw(base_size = 12) +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12),
    legend.position = "bottom",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10)
  )

# Save the plot
# ggsave("output/final/variables_across_sites.png", width = 10, height = 8, dpi = 300)

```

## Daily Vent Free Days

```{r}
# Get all objects in the environment that start with "model_coefs_sex"
model_objects <- mget(ls(pattern = "^model_coefs_vfds"))

# Combine all objects into one dataset
combined_model_coefs_daily_vfds <- bind_rows(model_objects, .id = "source")

# View the combined dataset
combined_model_coefs_daily_vfds



# Ensure that 'term', 'variable', and 'site' are factors for plotting purposes
model_coefficients_vfds <- combined_model_coefs_daily_vfds %>%
  mutate(
    term = as.factor(term),
    variable = as.factor(variable),
    site = as.factor(site)
  ) %>%
  mutate(significant = ifelse(p.value < 0.05, "Yes", "No")) |> 
  filter(str_detect(term, "^daily_")) |> 
  filter(term != "(Intercept)")  # Exclude intercept term

# Create forest plots
model_coefficients_vfds_plot <- model_coefficients_vfds |> 
ggplot(aes(x = term, y = estimate, ymin = conf.low, ymax = conf.high, color = variable, shape = significant)) +
  geom_pointrange(position = position_dodge(width = 0.6)) +
  facet_wrap(~ site, scales = "free_y") +
  # scale_y_log10() +
  coord_flip() +
  labs(
    title = "Comparison of Variables Across Sites on Ventilator Free Days",
    x = "Predictor Variable",
    y = "Coefficient",
    color = "Variable"
  ) +
  theme_bw(base_size = 12) +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12),
    legend.position = "bottom",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10)
  )

# Save the plot
# ggsave("output/final/variables_across_sites.png", width = 10, height = 8, dpi = 300)
```

## Effect of High Tidal Volume Ventilation on Outcomes (Daily)

**htvv_daily_percent** = hours with set volume \> 8cc/ibw / ventilator
hours that day

`"mortality_enc ~ pf_ratio_first_24hr + daily_pf_ratio + age_at_admission + sex_category + day + htvv_daily_percent + hospital_id"`
`"VFDs ~ pf_ratio_first_24hr + daily_pf_ratio + age_at_admission + sex_category + day + htvv_daily_percent + hospital_id"`

```{r}
htvv_models <- combined_model_coefs_daily_mort |> 
  bind_rows(combined_model_coefs_daily_vfds) |> 
  filter(variable == "pf_ratio") |> 
  filter(str_detect(term, "htvv_")) |> 
  mutate(group = fifelse(str_detect(source, "vfd"), "Vent Free Days (Coef)", "Mortality (OR)"),
         Estimate_transformed = ifelse(!str_detect(source, "vfd"), exp(estimate), estimate),
         LowerCI_transformed = ifelse(!str_detect(source, "vfd"), exp(conf.low), conf.low),
         UpperCI_transformed = ifelse(!str_detect(source, "vfd"), exp(conf.high), conf.high))

htvv_models_plot <- htvv_models |> 
    group_by(group) |> 
  mutate(site = fct_reorder(site, Estimate_transformed)) |> 
  ungroup() |> 
  filter(site != "EU") |> 
    mutate(
    term = recode(term,
                  "htvv_daily_percent" = "High TV % (per day)",
                  .default = term)
  ) |> 
  ggplot(aes(x = Estimate_transformed, y = site, color = term)) +
  geom_point(position = position_dodge(width = 0.6), size = 4) +  # Plot the point estimates
  geom_errorbarh(aes(xmin = LowerCI_transformed, xmax = UpperCI_transformed), 
                 position = position_dodge(width = 0.6), height = 0.25, size = 0.8) +  # Error bars with smaller height and thicker line
  facet_wrap(~group, scales = "free_x") +
  labs(x = "Estimate", y = "Site", color = "Model (StudyID)",
       title = "Association Between High Tidal Volume Exposure and Outcomes",
       subtitle = bquote(atop(
         italic("Models adjusted for: Admit PFR, Daily PFR, age, sex, day, hospital"),
         italic("Exposure: htvv_daily_percent = % of hours with Vt > 8 cc/kg IBW")))) +
  
  
  theme_bw(base_size = 12) +
  theme(
    axis.text.y = element_text(size = 12),
    axis.title.x = element_text(size = 14),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(face = "italic", size = 11),
    strip.text = element_text(size = 14, face = "bold"),  # Customize facet titles
    legend.position = "right",  # Move legend to the right for clarity
    # panel.grid.major.y = element_blank()  # Remove major y grid lines for a cleaner look
  ) +
  scale_colour_brewer(palette = "RdBu", direction = 1) +
  
    geom_vline(data = tibble(group = c("Mortality (OR)", "Vent Free Days (Coef)"),
                           vline = c(1, 0)),
             aes(xintercept = vline), linetype = "dashed", color = "gray50") 

htvv_models_plot

ggsave("aggregate_data/presentation_outputs/regression_results/htvv_patient_outcomes.png",
       htvv_models_plot, width = 12, height = 9)
  
```

## Effect of high tidal volume (bins)
```{r}
# Step 1: Load all mortality bin models
mort_bin_objects <- mget(ls(pattern = "^model_coefs_mortality_vt_bin_exclude"))

vt_bin_levels <- c(
  "<5 cc/kg",
  "5-6 cc/kg",
  "6-7 cc/kg",
  "7-8 cc/kg",
  "8-9 cc/kg",
  "9-10 cc/kg",
  "10-11 cc/kg",
  ">=11 cc/kg"
)

# Step 2: Combine into one dataset
combined_model_coefs_mort_bins <- bind_rows(mort_bin_objects, .id = "source") 

# Step 3: Clean for plotting
mortality_by_bin <- combined_model_coefs_mort_bins |>
  filter(term != "(Intercept)") |>
  filter(str_detect(term, "^vt_bin")) |>   # ✅ Only keep Vt bin predictors
  mutate(
    vt_bin = str_remove(term, "vt_bin"),
    vt_bin = factor(vt_bin, levels = vt_bin_levels),
    OR = estimate,  # <-- transform here
    CI_low = conf.low,
    CI_high = conf.high
  ) |> 
  mutate(vt_bin = factor(vt_bin, levels = vt_bin_levels))



mortality_bin_plot <- ggplot(mortality_by_bin, aes(x = OR, y = vt_bin)) +
  geom_point(color = "#d73027", size = 3) +
  geom_errorbarh(aes(xmin = CI_low, xmax = CI_high), height = 0.2, color = "#d73027") +
  geom_vline(xintercept = 1, linetype = "dashed", color = "gray40") +
  labs(
    title = "Mortality Risk by Tidal Volume Bin",
    subtitle = bquote(atop(
      italic("Model: mortality ~ vt_bin + age + sex + LAPS2 + P/F + S/F + pH + PCO2"),
      italic("Reference: < 5 cc/kg IBW")
    )),
    x = "Odds Ratio (OR)",
    y = "Tidal Volume Bin"
  ) +
  theme_bw(base_size = 13) +
  theme_minimal(base_size = 13) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(face = "italic", size = 11, hjust = 0),
    axis.text.y = element_text(size = 11),
    axis.title = element_text(size = 12)
  )

ggsave("aggregate_data/presentation_outputs/regression_results/mortality_by_vt_bin.png", mortality_bin_plot, width = 9, height = 6)


# Step 1: Load all VFD bin models
vfd_bin_objects <- mget(ls(pattern = "^model_coefs_vfd_vt_bin"))

# Step 2: Combine into one dataset
combined_model_coefs_vfd_bins <- bind_rows(vfd_bin_objects, .id = "source")


# Step 3: Clean for plotting
vfd_by_bin <- combined_model_coefs_vfd_bins |>
  filter(term != "(Intercept)") |>
  filter(str_detect(term, "^vt_bin")) |>
  mutate(
    vt_bin = str_remove(term, "vt_bin"),
    Estimate = estimate,
    CI_low = conf.low,
    CI_high = conf.high,
    vt_bin = fct_reorder(vt_bin, Estimate)
  ) |> 
  mutate(vt_bin = factor(vt_bin, levels = vt_bin_levels))

vfd_bin_plot <- ggplot(vfd_by_bin, aes(x = Estimate, y = vt_bin)) +
  geom_point(color = "#1b7837", size = 3) +
  geom_errorbarh(aes(xmin = CI_low, xmax = CI_high), height = 0.2, color = "#1b7837") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
  labs(
    title = "Ventilator-Free Days by Tidal Volume Bin",
    subtitle = bquote(atop(
      italic("Model: VFD ~ vt_bin + age + sex + LAPS2 + P/F + S/F + pH + PCO2"),
      italic("Reference: < 5 cc/kg IBW")
    )),
    x = "Difference in Mean VFDs",
    y = "Tidal Volume Bin"
  ) +
  theme_bw(base_size = 13) +
  theme_minimal(base_size = 13) +
theme(
  plot.title = element_text(face = "bold", size = 14),
  plot.subtitle = element_text(face = "italic", size = 11, hjust = 0),
  axis.text.y = element_text(size = 11),
  axis.title = element_text(size = 12)
)


ggsave("aggregate_data/presentation_outputs/regression_results/vfd_by_vt_bin.png", vfd_bin_plot, width = 9, height = 6)


```



## Abstract Writing

**Introduction** 
Patient outcomes are determined by many factors other than their
critical illness.

These include processes of care and institutional factors.
[@kerlin_physician-level_2018; @Gaieski_2014_Therelationshipbetween]

Hospital variation in critical care outcomes
[@Merchant__2014__Hospitalvariationin; @Vigen2014;
@Kahn__2006__Hospitalvolumeand] and processes of care
[@Vranas__2020__TheAssociationof] exist, but the extent to which this
variation may affect research is less well known. We sought to explore
the underlying variation in severity of illness scores and their
association with outcomes in mechanically ventilated patients with acute
respiratory failure.

**Methods**  
Methods: The Common Longitudinal Intensive Care Unit (CLIF) consortium
is comprised of **`r total_health_systems`** US academic health systems
that use a standardized data format to facilitate federated studies of
critical illness. We identified all adult patients admitted to the ICU and required at least 24 hours of mechanical ventilation from **`r start_date_chr`** to **`r end_date_chr`** , excluding patients with trachestomy within 72 hours of admission.

**Results**  
Of the **`r total_patients`** critically ill adults, the mean age was **`r round(mean_age, 1)`** years (standard deviation **`r round(sd_age, 1)`** years), and there were **`r format(total_females, scientific = FALSE)`** (**`r round(percent_females, 1)`%**) females, **`r format(total_black, scientific = FALSE)`** (**`r round(percent_black, 1)`%**) Black patients, and **`r total_hispanic`** (**`r round(percent_hispanic, 1)`%**) Hispanic patients across **`r total_health_systems`** healthcare systems and **`r total_hospitals`** hospitals.


```{r}
#| output: true

htvv_models_plot

```


```{r}
#| output: true

model_coefficients_vfds_plot

```

```{r}
#| output: true

model_coefficients_mort_plot

```

